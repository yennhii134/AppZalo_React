{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport axios from 'axios';\nimport config from \"./config\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nvar isRefreshing = false;\nvar refreshSubscribers = [];\nvar axiosInstance = axios.create({\n  baseURL: config.baseURL,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nfunction subscribeTokenRefresh(callback) {\n  refreshSubscribers.push(callback);\n}\nfunction onRefreshed(token) {\n  refreshSubscribers.map(function (callback) {\n    return callback(token);\n  });\n}\nfunction getRefreshToken() {\n  return _getRefreshToken.apply(this, arguments);\n}\nfunction _getRefreshToken() {\n  _getRefreshToken = _asyncToGenerator(function* () {\n    try {\n      var _refreshToken = yield AsyncStorage.getItem('refreshToken');\n      return _refreshToken;\n    } catch (error) {\n      console.error('Error getting refreshToken from AsyncStorage:', error);\n      return null;\n    }\n  });\n  return _getRefreshToken.apply(this, arguments);\n}\nvar refreshToken = await getRefreshToken();\naxiosInstance.interceptors.response.use(function (response) {\n  return response;\n}, function () {\n  var _ref = _asyncToGenerator(function* (error) {\n    var originalRequest = error.config;\n    if (error.response.status === 401 && !originalRequest._retry) {\n      if (isRefreshing) {\n        yield new Promise(function (resolve) {\n          return subscribeTokenRefresh(resolve);\n        });\n        return axiosInstance(originalRequest);\n      }\n      originalRequest._retry = true;\n      isRefreshing = true;\n      try {\n        var response = yield axiosInstance.post('/auth/refreshToken', {\n          refreshToken: refreshToken\n        });\n        var refreshedToken = response.data.accessToken;\n        originalRequest.headers.Authorization = 'Bearer ' + refreshedToken;\n        onRefreshed(refreshedToken);\n        return axiosInstance(originalRequest);\n      } catch (error) {\n        return Promise.reject(error);\n      } finally {\n        isRefreshing = false;\n      }\n    }\n    return Promise.reject(error);\n  });\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}());\nexport default axiosInstance;","map":{"version":3,"names":["axios","config","AsyncStorage","isRefreshing","refreshSubscribers","axiosInstance","create","baseURL","timeout","headers","subscribeTokenRefresh","callback","push","onRefreshed","token","map","getRefreshToken","_getRefreshToken","apply","arguments","_asyncToGenerator","refreshToken","getItem","error","console","interceptors","response","use","_ref","originalRequest","status","_retry","Promise","resolve","post","refreshedToken","data","accessToken","Authorization","reject","_x"],"sources":["C:/BaoTruc/iuh/ky2nam4/CNM/DeTai/AppZalo_CNM/Frontend/Mobile/zalofake/src/components/configs/axiosInstance.js"],"sourcesContent":["import axios from 'axios';\r\nimport config from './config';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\nlet isRefreshing = false;\r\nlet refreshSubscribers = [];\r\n\r\nconst axiosInstance = axios.create({\r\n  baseURL: config.baseURL,\r\n  timeout: 30000 ,\r\n  headers: {\r\n      'Content-Type': 'application/json',\r\n  }\r\n});\r\n\r\n\r\n\r\n// Hàm để thêm các subscriber vào mảng\r\nfunction subscribeTokenRefresh(callback) {\r\n    refreshSubscribers.push(callback);\r\n}\r\n\r\n// Hàm để gửi yêu cầu làm mới token\r\nfunction onRefreshed(token) {\r\n    refreshSubscribers.map((callback) => callback(token));\r\n}\r\n\r\n\r\n// Hàm để lấy access token từ AsyncStorage\r\nasync function getRefreshToken() {\r\n    try {\r\n        const refreshToken = await AsyncStorage.getItem('refreshToken');\r\n        return refreshToken;\r\n    } catch (error) {\r\n        console.error('Error getting refreshToken from AsyncStorage:', error);\r\n        return null;\r\n    }\r\n}\r\nconst refreshToken = await getRefreshToken();\r\n\r\n\r\naxiosInstance.interceptors.response.use(\r\n    (response) => {\r\n        return response;\r\n    },\r\n    async (error) => {\r\n        const originalRequest = error.config;\r\n        // Nếu lỗi là mã lỗi 401 (Unauthorized) và không phải là quá trình làm mới token\r\n        if (error.response.status === 401 && !originalRequest._retry) {\r\n            if (isRefreshing) {\r\n                // Nếu đang quá trình làm mới token, đợi cho đến khi token được làm mới xong và gửi lại yêu cầu ban đầu\r\n                await new Promise((resolve) => subscribeTokenRefresh(resolve));\r\n                return axiosInstance(originalRequest);\r\n            }\r\n            originalRequest._retry = true;\r\n            isRefreshing = true;\r\n            try {\r\n                // Gửi yêu cầu để làm mới token\r\n                const response = await axiosInstance.post('/auth/refreshToken', {\r\n                    refreshToken: refreshToken,\r\n                });\r\n                // Lưu trữ token mới\r\n                const refreshedToken = response.data.accessToken;\r\n                // Cập nhật header của request ban đầu với token mới\r\n                originalRequest.headers.Authorization = 'Bearer ' + refreshedToken;\r\n                // Gửi lại yêu cầu ban đầu với token mới\r\n                onRefreshed(refreshedToken);\r\n                // Trả về response sau khi làm mới token thành công\r\n                return axiosInstance(originalRequest);\r\n            } catch (error) {\r\n                // Xử lý lỗi khi làm mới token thất bại\r\n                return Promise.reject(error);\r\n            } finally {\r\n                isRefreshing = false;\r\n            }\r\n        }\r\n        // Trả về lỗi nếu không phải mã lỗi 401 hoặc quá trình làm mới token không thành công\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\nexport  default  axiosInstance ;\r\n\r\n\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM;AACb,OAAOC,YAAY,MAAM,2CAA2C;AAEpE,IAAIC,YAAY,GAAG,KAAK;AACxB,IAAIC,kBAAkB,GAAG,EAAE;AAE3B,IAAMC,aAAa,GAAGL,KAAK,CAACM,MAAM,CAAC;EACjCC,OAAO,EAAEN,MAAM,CAACM,OAAO;EACvBC,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE;IACL,cAAc,EAAE;EACpB;AACF,CAAC,CAAC;AAKF,SAASC,qBAAqBA,CAACC,QAAQ,EAAE;EACrCP,kBAAkB,CAACQ,IAAI,CAACD,QAAQ,CAAC;AACrC;AAGA,SAASE,WAAWA,CAACC,KAAK,EAAE;EACxBV,kBAAkB,CAACW,GAAG,CAAC,UAACJ,QAAQ;IAAA,OAAKA,QAAQ,CAACG,KAAK,CAAC;EAAA,EAAC;AACzD;AAAC,SAIcE,eAAeA,CAAA;EAAA,OAAAC,gBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,iBAAA;EAAAA,gBAAA,GAAAG,iBAAA,CAA9B,aAAiC;IAC7B,IAAI;MACA,IAAMC,aAAY,SAASnB,YAAY,CAACoB,OAAO,CAAC,cAAc,CAAC;MAC/D,OAAOD,aAAY;IACvB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,+CAA+C,EAAEA,KAAK,CAAC;MACrE,OAAO,IAAI;IACf;EACJ,CAAC;EAAA,OAAAN,gBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AACD,IAAME,YAAY,GAAG,MAAML,eAAe,CAAC,CAAC;AAG5CX,aAAa,CAACoB,YAAY,CAACC,QAAQ,CAACC,GAAG,CACnC,UAACD,QAAQ,EAAK;EACV,OAAOA,QAAQ;AACnB,CAAC;EAAA,IAAAE,IAAA,GAAAR,iBAAA,CACD,WAAOG,KAAK,EAAK;IACb,IAAMM,eAAe,GAAGN,KAAK,CAACtB,MAAM;IAEpC,IAAIsB,KAAK,CAACG,QAAQ,CAACI,MAAM,KAAK,GAAG,IAAI,CAACD,eAAe,CAACE,MAAM,EAAE;MAC1D,IAAI5B,YAAY,EAAE;QAEd,MAAM,IAAI6B,OAAO,CAAC,UAACC,OAAO;UAAA,OAAKvB,qBAAqB,CAACuB,OAAO,CAAC;QAAA,EAAC;QAC9D,OAAO5B,aAAa,CAACwB,eAAe,CAAC;MACzC;MACAA,eAAe,CAACE,MAAM,GAAG,IAAI;MAC7B5B,YAAY,GAAG,IAAI;MACnB,IAAI;QAEA,IAAMuB,QAAQ,SAASrB,aAAa,CAAC6B,IAAI,CAAC,oBAAoB,EAAE;UAC5Db,YAAY,EAAEA;QAClB,CAAC,CAAC;QAEF,IAAMc,cAAc,GAAGT,QAAQ,CAACU,IAAI,CAACC,WAAW;QAEhDR,eAAe,CAACpB,OAAO,CAAC6B,aAAa,GAAG,SAAS,GAAGH,cAAc;QAElEtB,WAAW,CAACsB,cAAc,CAAC;QAE3B,OAAO9B,aAAa,CAACwB,eAAe,CAAC;MACzC,CAAC,CAAC,OAAON,KAAK,EAAE;QAEZ,OAAOS,OAAO,CAACO,MAAM,CAAChB,KAAK,CAAC;MAChC,CAAC,SAAS;QACNpB,YAAY,GAAG,KAAK;MACxB;IACJ;IAEA,OAAO6B,OAAO,CAACO,MAAM,CAAChB,KAAK,CAAC;EAChC,CAAC;EAAA,iBAAAiB,EAAA;IAAA,OAAAZ,IAAA,CAAAV,KAAA,OAAAC,SAAA;EAAA;AAAA,GACL,CAAC;AAED,eAAiBd,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}