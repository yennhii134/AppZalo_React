{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport color from 'color';\nimport { black, white } from '../../styles/themes/v2/colors';\nconst DEFAULT_PADDING = 9;\nexport const getSegmentedButtonDensityPadding = _ref => {\n  let {\n    density\n  } = _ref;\n  let padding = DEFAULT_PADDING;\n  switch (density) {\n    case 'small':\n      return padding - 2;\n    case 'medium':\n      return padding - 4;\n    case 'high':\n      return padding - 8;\n    default:\n      return padding;\n  }\n};\nexport const getDisabledSegmentedButtonStyle = _ref2 => {\n  var _buttons$index, _buttons;\n  let {\n    theme,\n    index,\n    buttons\n  } = _ref2;\n  const width = getSegmentedButtonBorderWidth({\n    theme\n  });\n  const isDisabled = (_buttons$index = buttons[index]) === null || _buttons$index === void 0 ? void 0 : _buttons$index.disabled;\n  const isNextDisabled = (_buttons = buttons[index + 1]) === null || _buttons === void 0 ? void 0 : _buttons.disabled;\n  if (!isDisabled && isNextDisabled) {\n    return {\n      borderRightWidth: width\n    };\n  }\n  return {};\n};\nexport const getSegmentedButtonBorderRadius = _ref3 => {\n  let {\n    segment,\n    theme\n  } = _ref3;\n  if (segment === 'first') {\n    return _objectSpread({\n      borderTopRightRadius: 0,\n      borderBottomRightRadius: 0\n    }, theme.isV3 && {\n      borderRightWidth: 0\n    });\n  } else if (segment === 'last') {\n    return {\n      borderTopLeftRadius: 0,\n      borderBottomLeftRadius: 0\n    };\n  } else {\n    return _objectSpread({\n      borderRadius: 0\n    }, theme.isV3 && {\n      borderRightWidth: 0\n    });\n  }\n};\nconst getSegmentedButtonBackgroundColor = _ref4 => {\n  let {\n    checked,\n    theme\n  } = _ref4;\n  if (checked) {\n    if (theme.isV3) {\n      return theme.colors.secondaryContainer;\n    } else {\n      return color(theme.colors.primary).alpha(0.12).rgb().string();\n    }\n  }\n  return 'transparent';\n};\nconst getSegmentedButtonBorderColor = _ref5 => {\n  let {\n    theme,\n    disabled,\n    checked\n  } = _ref5;\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.surfaceDisabled;\n    }\n    return theme.colors.outline;\n  }\n  if (checked) {\n    return theme.colors.primary;\n  }\n  return color(theme.dark ? white : black).alpha(0.29).rgb().string();\n};\nconst getSegmentedButtonBorderWidth = _ref6 => {\n  let {\n    theme\n  } = _ref6;\n  if (theme.isV3) {\n    return 1;\n  }\n  return StyleSheet.hairlineWidth;\n};\nconst getSegmentedButtonTextColor = _ref7 => {\n  let {\n    theme,\n    disabled,\n    checked,\n    checkedColor,\n    uncheckedColor\n  } = _ref7;\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n    if (checked) {\n      return checkedColor ?? theme.colors.onSecondaryContainer;\n    }\n    return uncheckedColor ?? theme.colors.onSurface;\n  }\n  if (disabled) {\n    return theme.colors.disabled;\n  }\n  return theme.colors.primary;\n};\nexport const getSegmentedButtonColors = _ref8 => {\n  let {\n    theme,\n    disabled,\n    checked,\n    checkedColor,\n    uncheckedColor\n  } = _ref8;\n  const backgroundColor = getSegmentedButtonBackgroundColor({\n    theme,\n    checked\n  });\n  const borderColor = getSegmentedButtonBorderColor({\n    theme,\n    disabled,\n    checked\n  });\n  const textColor = getSegmentedButtonTextColor({\n    theme,\n    disabled,\n    checked,\n    checkedColor,\n    uncheckedColor\n  });\n  const borderWidth = getSegmentedButtonBorderWidth({\n    theme\n  });\n  return {\n    backgroundColor,\n    borderColor,\n    textColor,\n    borderWidth\n  };\n};","map":{"version":3,"names":["color","black","white","DEFAULT_PADDING","getSegmentedButtonDensityPadding","_ref","density","padding","getDisabledSegmentedButtonStyle","_ref2","_buttons$index","_buttons","theme","index","buttons","width","getSegmentedButtonBorderWidth","isDisabled","disabled","isNextDisabled","borderRightWidth","getSegmentedButtonBorderRadius","_ref3","segment","_objectSpread","borderTopRightRadius","borderBottomRightRadius","isV3","borderTopLeftRadius","borderBottomLeftRadius","borderRadius","getSegmentedButtonBackgroundColor","_ref4","checked","colors","secondaryContainer","primary","alpha","rgb","string","getSegmentedButtonBorderColor","_ref5","surfaceDisabled","outline","dark","_ref6","StyleSheet","hairlineWidth","getSegmentedButtonTextColor","_ref7","checkedColor","uncheckedColor","onSurfaceDisabled","onSecondaryContainer","onSurface","getSegmentedButtonColors","_ref8","backgroundColor","borderColor","textColor","borderWidth"],"sources":["D:\\HK2_Nam4\\CNM\\BTL\\New_3\\AppZalo_CNM\\Frontend\\Mobile\\zalofake\\node_modules\\react-native-paper\\src\\components\\SegmentedButtons\\utils.ts"],"sourcesContent":["import { StyleSheet, ViewStyle } from 'react-native';\n\nimport color from 'color';\n\nimport { black, white } from '../../styles/themes/v2/colors';\nimport type { InternalTheme } from '../../types';\n\ntype BaseProps = {\n  theme: InternalTheme;\n  disabled?: boolean;\n  checked: boolean;\n};\n\ntype SegmentedButtonProps = {\n  checkedColor?: string;\n  uncheckedColor?: string;\n} & BaseProps;\n\nconst DEFAULT_PADDING = 9;\n\nexport const getSegmentedButtonDensityPadding = ({\n  density,\n}: {\n  density?: 'regular' | 'small' | 'medium' | 'high';\n}) => {\n  let padding = DEFAULT_PADDING;\n\n  switch (density) {\n    case 'small':\n      return padding - 2;\n    case 'medium':\n      return padding - 4;\n    case 'high':\n      return padding - 8;\n    default:\n      return padding;\n  }\n};\n\nexport const getDisabledSegmentedButtonStyle = ({\n  theme,\n  index,\n  buttons,\n}: {\n  theme: InternalTheme;\n  buttons: { disabled?: boolean }[];\n  index: number;\n}): ViewStyle => {\n  const width = getSegmentedButtonBorderWidth({ theme });\n  const isDisabled = buttons[index]?.disabled;\n  const isNextDisabled = buttons[index + 1]?.disabled;\n\n  if (!isDisabled && isNextDisabled) {\n    return {\n      borderRightWidth: width,\n    };\n  }\n  return {};\n};\n\nexport const getSegmentedButtonBorderRadius = ({\n  segment,\n  theme,\n}: {\n  theme: InternalTheme;\n  segment?: 'first' | 'last';\n}): ViewStyle => {\n  if (segment === 'first') {\n    return {\n      borderTopRightRadius: 0,\n      borderBottomRightRadius: 0,\n      ...(theme.isV3 && { borderRightWidth: 0 }),\n    };\n  } else if (segment === 'last') {\n    return {\n      borderTopLeftRadius: 0,\n      borderBottomLeftRadius: 0,\n    };\n  } else {\n    return {\n      borderRadius: 0,\n      ...(theme.isV3 && { borderRightWidth: 0 }),\n    };\n  }\n};\n\nconst getSegmentedButtonBackgroundColor = ({ checked, theme }: BaseProps) => {\n  if (checked) {\n    if (theme.isV3) {\n      return theme.colors.secondaryContainer;\n    } else {\n      return color(theme.colors.primary).alpha(0.12).rgb().string();\n    }\n  }\n  return 'transparent';\n};\n\nconst getSegmentedButtonBorderColor = ({\n  theme,\n  disabled,\n  checked,\n}: BaseProps) => {\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.surfaceDisabled;\n    }\n    return theme.colors.outline;\n  }\n  if (checked) {\n    return theme.colors.primary;\n  }\n\n  return color(theme.dark ? white : black)\n    .alpha(0.29)\n    .rgb()\n    .string();\n};\n\nconst getSegmentedButtonBorderWidth = ({\n  theme,\n}: Omit<BaseProps, 'disabled' | 'checked'>) => {\n  if (theme.isV3) {\n    return 1;\n  }\n\n  return StyleSheet.hairlineWidth;\n};\n\nconst getSegmentedButtonTextColor = ({\n  theme,\n  disabled,\n  checked,\n  checkedColor,\n  uncheckedColor,\n}: SegmentedButtonProps) => {\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n    if (checked) {\n      return checkedColor ?? theme.colors.onSecondaryContainer;\n    }\n    return uncheckedColor ?? theme.colors.onSurface;\n  }\n\n  if (disabled) {\n    return theme.colors.disabled;\n  }\n  // Primary color is used for checked state too.\n  return theme.colors.primary;\n};\n\nexport const getSegmentedButtonColors = ({\n  theme,\n  disabled,\n  checked,\n  checkedColor,\n  uncheckedColor,\n}: SegmentedButtonProps) => {\n  const backgroundColor = getSegmentedButtonBackgroundColor({\n    theme,\n    checked,\n  });\n  const borderColor = getSegmentedButtonBorderColor({\n    theme,\n    disabled,\n    checked,\n  });\n  const textColor = getSegmentedButtonTextColor({\n    theme,\n    disabled,\n    checked,\n    checkedColor,\n    uncheckedColor,\n  });\n  const borderWidth = getSegmentedButtonBorderWidth({ theme });\n\n  return { backgroundColor, borderColor, textColor, borderWidth };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}