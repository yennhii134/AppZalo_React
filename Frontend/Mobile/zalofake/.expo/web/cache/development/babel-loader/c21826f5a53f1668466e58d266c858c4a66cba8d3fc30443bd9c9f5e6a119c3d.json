{"ast":null,"code":"import { useState } from \"react\";\nimport Toast from \"react-native-toast-message\";\nimport axiosInstance from \"../api/axiosInstance\";\nconst useForgotPw = () => {\n  const [systemOTP, setSystemOTP] = useState(null);\n  const [isOTPVerified, setIsOTPVerified] = useState(false);\n  const showToastSuccess = notice => {\n    Toast.show({\n      text1: notice,\n      type: \"success\",\n      topOffset: 0,\n      position: \"top\"\n    });\n  };\n  const showToastError = notice => {\n    Toast.show({\n      text1: notice,\n      type: \"error\",\n      topOffset: 0,\n      position: \"top\"\n    });\n  };\n  const verifyOTP = async (userOTP, systemOTP) => {\n    if (userOTP === systemOTP.otp && systemOTP.expires >= Date.now()) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n  const sendOTP = async email => {\n    const response = await axiosInstance.post(\"/auth/send-otp\", {\n      email\n    });\n    const data = response?.data;\n    return data.totp;\n  };\n  const check_mail = async email => {\n    try {\n      const response = await axiosInstance.post(\"/users/check-email\", {\n        email\n      });\n      if (response?.status === 404) {\n        showToastError(response.data.message);\n        return false;\n      } else if (response.status === 200) {\n        return true;\n      } else {\n        return false;\n      }\n    } catch (error) {\n      console.log(error);\n      showToastError(error.response.data.message);\n      return false;\n    }\n  };\n  const getOTP = async email => {\n    try {\n      setIsOTPVerified(false);\n      const otp = await sendOTP(email);\n      if (otp) {\n        showToastSuccess(\"OTP sent to your email\");\n        setSystemOTP(otp);\n        return true;\n      } else {\n        showToastError(\"Failed to send OTP\");\n        return false;\n      }\n    } catch (error) {\n      console.log(error);\n      showToastError(\"Failed to send OTP\");\n      return false;\n    }\n  };\n  const handleOTP = async otp => {\n    const verified = await verifyOTP(otp, systemOTP);\n    setIsOTPVerified(verified);\n    try {\n      if (verified) {\n        showToastSuccess(\"Valid OTP\");\n        setIsOTPVerified(true);\n        return true;\n      } else {\n        showToastError(\"Invalid OTP\");\n        return false;\n      }\n    } catch (error) {\n      console.log(error);\n      setIsOTPVerified(true);\n      showToastError(error.response.data.message);\n      return false;\n    }\n  };\n  const resetPassword = async (email, newPassword) => {\n    try {\n      const response = await axiosInstance.post(\"/auth/reset-password\", {\n        email,\n        newPassword\n      });\n      if (response?.status === 404) {\n        return false;\n      } else if (response?.status === 400) {\n        return false;\n      } else if (response.status === 200) {\n        return true;\n      } else {\n        showToastError(\"Failed to reset password\");\n        return false;\n      }\n    } catch (error) {\n      console.log(error);\n      setIsOTPVerified(true);\n      showToastError(error.response.data.message);\n      return false;\n    }\n  };\n  return {\n    isOTPVerified,\n    getOTP,\n    resetPassword,\n    handleOTP,\n    showToastError,\n    showToastSuccess,\n    check_mail\n  };\n};\nexport default useForgotPw;","map":{"version":3,"names":["useState","Toast","axiosInstance","useForgotPw","systemOTP","setSystemOTP","isOTPVerified","setIsOTPVerified","showToastSuccess","notice","show","text1","type","topOffset","position","showToastError","verifyOTP","userOTP","otp","expires","Date","now","sendOTP","email","response","post","data","totp","check_mail","status","message","error","console","log","getOTP","handleOTP","verified","resetPassword","newPassword"],"sources":["D:/HK2_Nam4/CNM/BTL/New_3/AppZalo_CNM/Frontend/Mobile/zalofake/src/hooks/useResetPw.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport Toast from \"react-native-toast-message\";\r\nimport axiosInstance from \"../api/axiosInstance\";\r\n\r\nconst useForgotPw = () => {\r\n    const [systemOTP, setSystemOTP] = useState(null);\r\n    const [isOTPVerified, setIsOTPVerified] = useState(false);\r\n\r\n    const showToastSuccess = (notice) => {\r\n        Toast.show({\r\n            text1: notice,\r\n            type: \"success\",\r\n            topOffset: 0,\r\n            position: \"top\",\r\n        });\r\n    };\r\n    const showToastError = (notice) => {\r\n        Toast.show({\r\n            text1: notice,\r\n            type: \"error\",\r\n            topOffset: 0,\r\n            position: \"top\",\r\n        });\r\n    };\r\n\r\n    const verifyOTP = async (userOTP, systemOTP) => {\r\n        if (userOTP === systemOTP.otp && systemOTP.expires >= Date.now()) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    };\r\n\r\n    const sendOTP = async (email) => {\r\n        const response = await axiosInstance.post(\"/auth/send-otp\", {\r\n            email,\r\n        });\r\n        const data = response?.data;\r\n        return data.totp;\r\n    };\r\n\r\n    const check_mail = async (email) => {\r\n        try {\r\n            const response = await axiosInstance.post(\"/users/check-email\", {\r\n                email,\r\n            });\r\n          \r\n            if(response?.status === 404) {\r\n                showToastError(response.data.message);\r\n                return false;\r\n            }\r\n            else if (response.status === 200) {\r\n                return true;\r\n            }\r\n            else {\r\n                // toast.error(data.response.message);\r\n                return false;\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n            showToastError(error.response.data.message);\r\n            return false;\r\n        }\r\n    }\r\n    const getOTP = async (email) => {\r\n        try {\r\n            setIsOTPVerified(false);\r\n            const otp = await sendOTP(email);\r\n\r\n            if (otp) {\r\n                showToastSuccess(\"OTP sent to your email\");\r\n                setSystemOTP(otp);\r\n                return true;\r\n            } else {\r\n                showToastError(\"Failed to send OTP\");\r\n                return false;\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n            showToastError(\"Failed to send OTP\");\r\n            return false;\r\n        }\r\n    };\r\n\r\n    const handleOTP = async (otp) => {\r\n        const verified = await verifyOTP(otp, systemOTP);\r\n        setIsOTPVerified(verified);\r\n        try {\r\n            if (verified) {\r\n                showToastSuccess(\"Valid OTP\")\r\n                setIsOTPVerified(true)\r\n                return true;\r\n            }\r\n            else {\r\n                showToastError(\"Invalid OTP\");\r\n                return false;\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n            setIsOTPVerified(true);\r\n            showToastError(error.response.data.message);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    const resetPassword = async ( email, newPassword) => {\r\n        try {\r\n            const response = await axiosInstance.post(\"/auth/reset-password\", {\r\n                email,\r\n                newPassword,\r\n            });\r\n            if(response?.status === 404){\r\n                return false;\r\n            }\r\n            else if(response?.status === 400){\r\n                return false;\r\n            }\r\n            else if (response.status === 200) {\r\n                return true;\r\n            } else {\r\n                showToastError(\"Failed to reset password\")\r\n                return false;\r\n            }\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            setIsOTPVerified(true);\r\n            showToastError(error.response.data.message);\r\n            return false;\r\n        }\r\n    }\r\n    return {\r\n        isOTPVerified,\r\n        getOTP,\r\n        resetPassword,\r\n        handleOTP,\r\n        showToastError,\r\n        showToastSuccess,\r\n        check_mail\r\n    };\r\n};\r\n\r\nexport default useForgotPw ;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}