{"ast":null,"code":"import { useState } from \"react\";\nimport { useAuthContext } from \"../contexts/AuthContext\";\nimport Toast from \"react-native-toast-message\";\nimport * as Device from \"expo-device\";\nimport axiosInstance from \"../api/axiosInstance\";\nconst useLogin = () => {\n  const [loading, setLoading] = useState(false);\n  const [loginCount, setLoginCount] = useState(1);\n  const {\n    setAuthUser,\n    setAccessToken,\n    setRefreshToken\n  } = useAuthContext();\n  const login = async (phone, password) => {\n    setLoading(true);\n    try {\n      const device_id = Device.osBuildId;\n      const response = await axiosInstance.post(\"/auth/login\", {\n        phone,\n        password,\n        device_id\n      });\n      const data = response.data;\n      if (response && response?.status === 200) {\n        setAuthUser(data.user);\n        setAccessToken(data.accessToken);\n        setRefreshToken(data.refreshToken);\n      } else {\n        showMesg(\"Error during login\", \"error\");\n      }\n    } catch (error) {\n      if (error.response.status === 401) {\n        console.log(loginCount);\n        setLoginCount(loginCount + 1);\n        if (loginCount === 5) {\n          setLoginCount(1);\n        }\n        showMesg(\"Invalid phone or password !\", \"error\");\n      } else if (error.request) {\n        showMesg(\"Error server, please try again !\", \"error\");\n        throw error;\n      } else {\n        showMesg(\"Error during login\", \"error\");\n        throw error;\n      }\n    }\n    setLoading(false);\n  };\n  return {\n    login,\n    setLoginCount,\n    loading,\n    loginCount\n  };\n};\nconst showMesg = (mesg, type) => {\n  Toast.show({\n    type: `${type}`,\n    text1: `${mesg}`,\n    text2: `${mesg}`\n  });\n};\nexport default useLogin;","map":{"version":3,"names":["useState","useAuthContext","Toast","Device","axiosInstance","useLogin","loading","setLoading","loginCount","setLoginCount","setAuthUser","setAccessToken","setRefreshToken","login","phone","password","device_id","osBuildId","response","post","data","status","user","accessToken","refreshToken","showMesg","error","console","log","request","mesg","type","show","text1","text2"],"sources":["D:/HK2_Nam4/CNM/BTL/New_3/AppZalo_CNM/Frontend/Mobile/zalofake/src/hooks/useLogin.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport { useAuthContext } from \"../contexts/AuthContext\";\r\nimport Toast from \"react-native-toast-message\";\r\nimport * as Device from \"expo-device\";\r\n\r\nimport axiosInstance from \"../api/axiosInstance\";\r\n\r\nconst useLogin = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [loginCount, setLoginCount] = useState(1);\r\n  const { setAuthUser, setAccessToken, setRefreshToken } = useAuthContext();\r\n  const login = async (phone, password) => {\r\n    setLoading(true);\r\n    try {\r\n      const device_id = Device.osBuildId;\r\n      const response = await axiosInstance.post(\"/auth/login\", {\r\n        phone,\r\n        password,\r\n        device_id,\r\n      });\r\n\r\n      const data = response.data;\r\n\r\n      if (response && response?.status === 200) {\r\n        setAuthUser(data.user);\r\n        setAccessToken(data.accessToken);\r\n        setRefreshToken(data.refreshToken);\r\n        // console.log(data.accessToken);\r\n      } else {\r\n        showMesg(\"Error during login\", \"error\");\r\n      }\r\n    } catch (error) {\r\n      if (error.response.status === 401) {\r\n        console.log(loginCount);\r\n        setLoginCount(loginCount + 1);\r\n        if (loginCount === 5) {\r\n          setLoginCount(1);\r\n        }\r\n        showMesg(\"Invalid phone or password !\", \"error\");\r\n      } else if (error.request) {\r\n        showMesg(\"Error server, please try again !\", \"error\");\r\n        throw error;\r\n      } else {\r\n        showMesg(\"Error during login\", \"error\");\r\n        throw error;\r\n      }\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  return { login, setLoginCount, loading, loginCount };\r\n};\r\n\r\nconst showMesg = (mesg, type) => {\r\n  Toast.show({\r\n    type: `${type}`,\r\n    text1: `${mesg}`,\r\n    text2: `${mesg}`,\r\n  });\r\n};\r\n\r\nexport default useLogin;\r\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,cAAc,QAAQ,yBAAyB;AACxD,OAAOC,KAAK,MAAM,4BAA4B;AAC9C,OAAO,KAAKC,MAAM,MAAM,aAAa;AAErC,OAAOC,aAAa,MAAM,sBAAsB;AAEhD,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EACrB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACQ,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAM;IAAEU,WAAW;IAAEC,cAAc;IAAEC;EAAgB,CAAC,GAAGX,cAAc,CAAC,CAAC;EACzE,MAAMY,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IACvCR,UAAU,CAAC,IAAI,CAAC;IAChB,IAAI;MACF,MAAMS,SAAS,GAAGb,MAAM,CAACc,SAAS;MAClC,MAAMC,QAAQ,GAAG,MAAMd,aAAa,CAACe,IAAI,CAAC,aAAa,EAAE;QACvDL,KAAK;QACLC,QAAQ;QACRC;MACF,CAAC,CAAC;MAEF,MAAMI,IAAI,GAAGF,QAAQ,CAACE,IAAI;MAE1B,IAAIF,QAAQ,IAAIA,QAAQ,EAAEG,MAAM,KAAK,GAAG,EAAE;QACxCX,WAAW,CAACU,IAAI,CAACE,IAAI,CAAC;QACtBX,cAAc,CAACS,IAAI,CAACG,WAAW,CAAC;QAChCX,eAAe,CAACQ,IAAI,CAACI,YAAY,CAAC;MAEpC,CAAC,MAAM;QACLC,QAAQ,CAAC,oBAAoB,EAAE,OAAO,CAAC;MACzC;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,IAAIA,KAAK,CAACR,QAAQ,CAACG,MAAM,KAAK,GAAG,EAAE;QACjCM,OAAO,CAACC,GAAG,CAACpB,UAAU,CAAC;QACvBC,aAAa,CAACD,UAAU,GAAG,CAAC,CAAC;QAC7B,IAAIA,UAAU,KAAK,CAAC,EAAE;UACpBC,aAAa,CAAC,CAAC,CAAC;QAClB;QACAgB,QAAQ,CAAC,6BAA6B,EAAE,OAAO,CAAC;MAClD,CAAC,MAAM,IAAIC,KAAK,CAACG,OAAO,EAAE;QACxBJ,QAAQ,CAAC,kCAAkC,EAAE,OAAO,CAAC;QACrD,MAAMC,KAAK;MACb,CAAC,MAAM;QACLD,QAAQ,CAAC,oBAAoB,EAAE,OAAO,CAAC;QACvC,MAAMC,KAAK;MACb;IACF;IACAnB,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC;EAED,OAAO;IAAEM,KAAK;IAAEJ,aAAa;IAAEH,OAAO;IAAEE;EAAW,CAAC;AACtD,CAAC;AAED,MAAMiB,QAAQ,GAAGA,CAACK,IAAI,EAAEC,IAAI,KAAK;EAC/B7B,KAAK,CAAC8B,IAAI,CAAC;IACTD,IAAI,EAAG,GAAEA,IAAK,EAAC;IACfE,KAAK,EAAG,GAAEH,IAAK,EAAC;IAChBI,KAAK,EAAG,GAAEJ,IAAK;EACjB,CAAC,CAAC;AACJ,CAAC;AAED,eAAezB,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}