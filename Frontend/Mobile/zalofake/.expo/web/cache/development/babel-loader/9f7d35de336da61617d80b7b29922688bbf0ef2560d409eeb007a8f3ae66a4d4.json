{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nconst _excluded = [\"icon\", \"size\", \"style\", \"theme\"],\n  _excluded2 = [\"backgroundColor\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useInternalTheme } from '../../core/theming';\nimport { white } from '../../styles/themes/v2/colors';\nimport getContrastingColor from '../../utils/getContrastingColor';\nimport Icon from '../Icon';\nconst defaultSize = 64;\nconst Avatar = _ref => {\n  var _theme$colors;\n  let {\n      icon,\n      size = defaultSize,\n      style,\n      theme: themeOverrides\n    } = _ref,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  const theme = useInternalTheme(themeOverrides);\n  const _ref2 = StyleSheet.flatten(style) || {},\n    {\n      backgroundColor = (_theme$colors = theme.colors) === null || _theme$colors === void 0 ? void 0 : _theme$colors.primary\n    } = _ref2,\n    restStyle = _objectWithoutProperties(_ref2, _excluded2);\n  const textColor = rest.color ?? getContrastingColor(backgroundColor, white, 'rgba(0, 0, 0, .54)');\n  return React.createElement(View, _extends({\n    style: [{\n      width: size,\n      height: size,\n      borderRadius: size / 2,\n      backgroundColor\n    }, styles.container, restStyle]\n  }, rest), React.createElement(Icon, {\n    source: icon,\n    color: textColor,\n    size: size * 0.6\n  }));\n};\nAvatar.displayName = 'Avatar.Icon';\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\nexport default Avatar;","map":{"version":3,"names":["React","StyleSheet","View","useInternalTheme","white","getContrastingColor","Icon","defaultSize","Avatar","_ref","_theme$colors","icon","size","style","theme","themeOverrides","rest","_objectWithoutProperties","_excluded","_ref2","flatten","backgroundColor","colors","primary","restStyle","_excluded2","textColor","color","createElement","_extends","width","height","borderRadius","styles","container","source","displayName","create","justifyContent","alignItems"],"sources":["D:\\HK2_Nam4\\CNM\\BTL\\New_3\\AppZalo_CNM\\Frontend\\Mobile\\zalofake\\node_modules\\react-native-paper\\src\\components\\Avatar\\AvatarIcon.tsx"],"sourcesContent":["import * as React from 'react';\nimport { StyleProp, StyleSheet, View, ViewStyle } from 'react-native';\n\nimport { useInternalTheme } from '../../core/theming';\nimport { white } from '../../styles/themes/v2/colors';\nimport type { ThemeProp } from '../../types';\nimport getContrastingColor from '../../utils/getContrastingColor';\nimport Icon, { IconSource } from '../Icon';\n\nconst defaultSize = 64;\n\nexport type Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Icon to display for the `Avatar`.\n   */\n  icon: IconSource;\n  /**\n   * Size of the avatar.\n   */\n  size?: number;\n  /**\n   * Custom color for the icon.\n   */\n  color?: string;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n};\n\n/**\n * Avatars can be used to represent people in a graphical way.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Avatar.Icon size={24} icon=\"folder\" />\n * );\n * ```\n */\nconst Avatar = ({\n  icon,\n  size = defaultSize,\n  style,\n  theme: themeOverrides,\n  ...rest\n}: Props) => {\n  const theme = useInternalTheme(themeOverrides);\n  const { backgroundColor = theme.colors?.primary, ...restStyle } =\n    StyleSheet.flatten(style) || {};\n  const textColor =\n    rest.color ??\n    getContrastingColor(backgroundColor, white, 'rgba(0, 0, 0, .54)');\n\n  return (\n    <View\n      style={[\n        {\n          width: size,\n          height: size,\n          borderRadius: size / 2,\n          backgroundColor,\n        },\n        styles.container,\n        restStyle,\n      ]}\n      {...rest}\n    >\n      <Icon source={icon} color={textColor} size={size * 0.6} />\n    </View>\n  );\n};\n\nAvatar.displayName = 'Avatar.Icon';\n\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default Avatar;\n"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAA,OAAAC,UAAA;AAAA,OAAAC,IAAA;AAG9B,SAASC,gBAAgB,QAAQ,oBAAoB;AACrD,SAASC,KAAK,QAAQ,+BAA+B;AAErD,OAAOC,mBAAmB,MAAM,iCAAiC;AACjE,OAAOC,IAAI,MAAsB,SAAS;AAE1C,MAAMC,WAAW,GAAG,EAAE;AAmCtB,MAAMC,MAAM,GAAGC,IAAA,IAMF;EAAA,IAAAC,aAAA;EAAA,IANG;MACdC,IAAI;MACJC,IAAI,GAAGL,WAAW;MAClBM,KAAK;MACLC,KAAK,EAAEC;IAEF,CAAC,GAAAN,IAAA;IADHO,IAAA,GAAAC,wBAAA,CACGR,IAAA,EAAAS,SAAA;EACN,MAAMJ,KAAK,GAAGX,gBAAgB,CAACY,cAAc,CAAC;EAC9C,MAAAI,KAAA,GACElB,UAAU,CAACmB,OAAO,CAACP,KAAK,CAAC,IAAI,CAAC,CAAC;IAD3B;MAAEQ,eAAe,IAAAX,aAAA,GAAGI,KAAK,CAACQ,MAAM,cAAAZ,aAAA,uBAAZA,aAAA,CAAca;IAAsB,CAAC,GAAAJ,KAAA;IAAXK,SAAA,GAAAP,wBAAA,CAAAE,KAAA,EAAAM,UAAA;EAEpD,MAAMC,SAAS,GACbV,IAAI,CAACW,KAAK,IACVtB,mBAAmB,CAACgB,eAAe,EAAEjB,KAAK,EAAE,oBAAoB,CAAC;EAEnE,OACEJ,KAAA,CAAA4B,aAAA,CAAC1B,IAAI,EAAA2B,QAAA;IACHhB,KAAK,EAAE,CACL;MACEiB,KAAK,EAAElB,IAAI;MACXmB,MAAM,EAAEnB,IAAI;MACZoB,YAAY,EAAEpB,IAAI,GAAG,CAAC;MACtBS;IACF,CAAC,EACDY,MAAM,CAACC,SAAS,EAChBV,SAAS;EACT,GACER,IAAI,GAERhB,KAAA,CAAA4B,aAAA,CAACtB,IAAI;IAAC6B,MAAM,EAAExB,IAAK;IAACgB,KAAK,EAAED,SAAU;IAACd,IAAI,EAAEA,IAAI,GAAG;EAAI,CAAE,CACrD,CAAC;AAEX,CAAC;AAEDJ,MAAM,CAAC4B,WAAW,GAAG,aAAa;AAElC,MAAMH,MAAM,GAAGhC,UAAU,CAACoC,MAAM,CAAC;EAC/BH,SAAS,EAAE;IACTI,cAAc,EAAE,QAAQ;IACxBC,UAAU,EAAE;EACd;AACF,CAAC,CAAC;AAEF,eAAe/B,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}