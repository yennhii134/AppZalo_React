{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport color from 'color';\nconst getBorderColor = _ref => {\n  let {\n    theme,\n    disabled\n  } = _ref;\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.surfaceDisabled;\n    }\n    return theme.colors.outline;\n  }\n  return undefined;\n};\nconst getBackgroundColor = _ref2 => {\n  let {\n    theme,\n    isMode,\n    disabled,\n    selected,\n    customContainerColor\n  } = _ref2;\n  if (theme.isV3) {\n    if (disabled) {\n      if (isMode('contained') || isMode('contained-tonal')) {\n        return theme.colors.surfaceDisabled;\n      }\n    }\n    if (typeof customContainerColor !== 'undefined') {\n      return customContainerColor;\n    }\n    if (isMode('contained')) {\n      if (selected) {\n        return theme.colors.primary;\n      }\n      return theme.colors.surfaceVariant;\n    }\n    if (isMode('contained-tonal')) {\n      if (selected) {\n        return theme.colors.secondaryContainer;\n      }\n      return theme.colors.surfaceVariant;\n    }\n    if (isMode('outlined')) {\n      if (selected) {\n        return theme.colors.inverseSurface;\n      }\n    }\n  }\n  if (typeof customContainerColor !== 'undefined') {\n    return customContainerColor;\n  }\n  return undefined;\n};\nconst getIconColor = _ref3 => {\n  let {\n    theme,\n    isMode,\n    disabled,\n    selected,\n    customIconColor\n  } = _ref3;\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n    if (typeof customIconColor !== 'undefined') {\n      return customIconColor;\n    }\n    if (isMode('contained')) {\n      if (selected) {\n        return theme.colors.onPrimary;\n      }\n      return theme.colors.primary;\n    }\n    if (isMode('contained-tonal')) {\n      if (selected) {\n        return theme.colors.onSecondaryContainer;\n      }\n      return theme.colors.onSurfaceVariant;\n    }\n    if (isMode('outlined')) {\n      if (selected) {\n        return theme.colors.inverseOnSurface;\n      }\n      return theme.colors.onSurfaceVariant;\n    }\n    if (selected) {\n      return theme.colors.primary;\n    }\n    return theme.colors.onSurfaceVariant;\n  }\n  if (typeof customIconColor !== 'undefined') {\n    return customIconColor;\n  }\n  return theme.colors.text;\n};\nconst getRippleColor = _ref4 => {\n  let {\n    theme,\n    iconColor,\n    customRippleColor\n  } = _ref4;\n  if (customRippleColor) {\n    return customRippleColor;\n  }\n  if (theme.isV3) {\n    return color(iconColor).alpha(0.12).rgb().string();\n  }\n  return color(iconColor).alpha(0.32).rgb().string();\n};\nexport const getIconButtonColor = _ref5 => {\n  let {\n    theme,\n    disabled,\n    mode,\n    selected,\n    customIconColor,\n    customContainerColor,\n    customRippleColor\n  } = _ref5;\n  const isMode = modeToCompare => {\n    return mode === modeToCompare;\n  };\n  const baseIconColorProps = {\n    theme,\n    isMode,\n    disabled,\n    selected\n  };\n  const iconColor = getIconColor(_objectSpread(_objectSpread({}, baseIconColorProps), {}, {\n    customIconColor\n  }));\n  return {\n    iconColor,\n    backgroundColor: getBackgroundColor(_objectSpread(_objectSpread({}, baseIconColorProps), {}, {\n      customContainerColor\n    })),\n    rippleColor: getRippleColor({\n      theme,\n      iconColor,\n      customRippleColor\n    }),\n    borderColor: getBorderColor({\n      theme,\n      disabled\n    })\n  };\n};","map":{"version":3,"names":["color","getBorderColor","_ref","theme","disabled","isV3","colors","surfaceDisabled","outline","undefined","getBackgroundColor","_ref2","isMode","selected","customContainerColor","primary","surfaceVariant","secondaryContainer","inverseSurface","getIconColor","_ref3","customIconColor","onSurfaceDisabled","onPrimary","onSecondaryContainer","onSurfaceVariant","inverseOnSurface","text","getRippleColor","_ref4","iconColor","customRippleColor","alpha","rgb","string","getIconButtonColor","_ref5","mode","modeToCompare","baseIconColorProps","_objectSpread","backgroundColor","rippleColor","borderColor"],"sources":["D:\\HK2_Nam4\\CNM\\BTL\\New_3\\AppZalo_CNM\\Frontend\\Mobile\\zalofake\\node_modules\\react-native-paper\\src\\components\\IconButton\\utils.ts"],"sourcesContent":["import type { ColorValue } from 'react-native';\n\nimport color from 'color';\n\nimport type { InternalTheme } from '../../types';\n\ntype IconButtonMode = 'outlined' | 'contained' | 'contained-tonal';\n\ntype BaseProps = {\n  theme: InternalTheme;\n  isMode: (mode: IconButtonMode) => boolean;\n  disabled?: boolean;\n  selected?: boolean;\n};\n\nconst getBorderColor = ({\n  theme,\n  disabled,\n}: {\n  theme: InternalTheme;\n  disabled?: boolean;\n}) => {\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.surfaceDisabled;\n    }\n\n    return theme.colors.outline;\n  }\n\n  return undefined;\n};\n\nconst getBackgroundColor = ({\n  theme,\n  isMode,\n  disabled,\n  selected,\n  customContainerColor,\n}: BaseProps & { customContainerColor?: string }) => {\n  if (theme.isV3) {\n    if (disabled) {\n      if (isMode('contained') || isMode('contained-tonal')) {\n        return theme.colors.surfaceDisabled;\n      }\n    }\n\n    if (typeof customContainerColor !== 'undefined') {\n      return customContainerColor;\n    }\n\n    if (isMode('contained')) {\n      if (selected) {\n        return theme.colors.primary;\n      }\n      return theme.colors.surfaceVariant;\n    }\n\n    if (isMode('contained-tonal')) {\n      if (selected) {\n        return theme.colors.secondaryContainer;\n      }\n      return theme.colors.surfaceVariant;\n    }\n\n    if (isMode('outlined')) {\n      if (selected) {\n        return theme.colors.inverseSurface;\n      }\n    }\n  }\n\n  if (typeof customContainerColor !== 'undefined') {\n    return customContainerColor;\n  }\n\n  return undefined;\n};\n\nconst getIconColor = ({\n  theme,\n  isMode,\n  disabled,\n  selected,\n  customIconColor,\n}: BaseProps & { customIconColor?: string }) => {\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n\n    if (typeof customIconColor !== 'undefined') {\n      return customIconColor;\n    }\n\n    if (isMode('contained')) {\n      if (selected) {\n        return theme.colors.onPrimary;\n      }\n      return theme.colors.primary;\n    }\n\n    if (isMode('contained-tonal')) {\n      if (selected) {\n        return theme.colors.onSecondaryContainer;\n      }\n      return theme.colors.onSurfaceVariant;\n    }\n\n    if (isMode('outlined')) {\n      if (selected) {\n        return theme.colors.inverseOnSurface;\n      }\n      return theme.colors.onSurfaceVariant;\n    }\n\n    if (selected) {\n      return theme.colors.primary;\n    }\n    return theme.colors.onSurfaceVariant;\n  }\n\n  if (typeof customIconColor !== 'undefined') {\n    return customIconColor;\n  }\n\n  return theme.colors.text;\n};\n\nconst getRippleColor = ({\n  theme,\n  iconColor,\n  customRippleColor,\n}: {\n  theme: InternalTheme;\n  iconColor: string;\n  customRippleColor?: ColorValue;\n}) => {\n  if (customRippleColor) {\n    return customRippleColor;\n  }\n  if (theme.isV3) {\n    return color(iconColor).alpha(0.12).rgb().string();\n  }\n  return color(iconColor).alpha(0.32).rgb().string();\n};\n\nexport const getIconButtonColor = ({\n  theme,\n  disabled,\n  mode,\n  selected,\n  customIconColor,\n  customContainerColor,\n  customRippleColor,\n}: {\n  theme: InternalTheme;\n  disabled?: boolean;\n  selected?: boolean;\n  mode?: IconButtonMode;\n  customIconColor?: string;\n  customContainerColor?: string;\n  customRippleColor?: ColorValue;\n}) => {\n  const isMode = (modeToCompare: IconButtonMode) => {\n    return mode === modeToCompare;\n  };\n\n  const baseIconColorProps = {\n    theme,\n    isMode,\n    disabled,\n    selected,\n  };\n\n  const iconColor = getIconColor({\n    ...baseIconColorProps,\n    customIconColor,\n  });\n\n  return {\n    iconColor,\n    backgroundColor: getBackgroundColor({\n      ...baseIconColorProps,\n      customContainerColor,\n    }),\n    rippleColor: getRippleColor({ theme, iconColor, customRippleColor }),\n    borderColor: getBorderColor({ theme, disabled }),\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}