{"ast":null,"code":"import { Platform } from 'expo-modules-core';\nimport UAParser from 'ua-parser-js';\nimport { DeviceType } from './Device.types';\nlet result = null;\nif (Platform.isDOMAvailable) {\n  const parser = new UAParser(window.navigator.userAgent);\n  result = parser.getResult();\n}\nfunction convertGiBtoBytes(gib) {\n  return Math.round(gib * 1024 ** 3);\n}\nfunction getDeviceType() {\n  switch (result?.device?.type) {\n    case 'mobile':\n      return DeviceType.PHONE;\n    case 'tablet':\n      return DeviceType.TABLET;\n    case 'smarttv':\n      return DeviceType.TV;\n    case 'console':\n    case 'embedded':\n    case 'wearable':\n      return DeviceType.UNKNOWN;\n    default:\n      return DeviceType.DESKTOP;\n  }\n}\nexport default {\n  get isDevice() {\n    return true;\n  },\n  get brand() {\n    return null;\n  },\n  get manufacturer() {\n    return result && result.device.vendor || null;\n  },\n  get modelName() {\n    return result && result.device.model || null;\n  },\n  get deviceYearClass() {\n    return null;\n  },\n  get deviceType() {\n    return getDeviceType();\n  },\n  get totalMemory() {\n    if (Platform.isDOMAvailable && 'deviceMemory' in navigator) {\n      const {\n        deviceMemory\n      } = navigator;\n      return convertGiBtoBytes(deviceMemory);\n    }\n    return null;\n  },\n  get supportedCpuArchitectures() {\n    return result && result.cpu.architecture ? [result.cpu.architecture] : null;\n  },\n  get osName() {\n    return result && result.os.name || '';\n  },\n  get osVersion() {\n    return result && result.os.version || '';\n  },\n  get osBuildId() {\n    return null;\n  },\n  get osInternalBuildId() {\n    return null;\n  },\n  get deviceName() {\n    return null;\n  },\n  async getDeviceTypeAsync() {\n    return getDeviceType();\n  },\n  async isRootedExperimentalAsync() {\n    return false;\n  }\n};","map":{"version":3,"names":["Platform","UAParser","DeviceType","result","isDOMAvailable","parser","window","navigator","userAgent","getResult","convertGiBtoBytes","gib","Math","round","getDeviceType","device","type","PHONE","TABLET","TV","UNKNOWN","DESKTOP","isDevice","brand","manufacturer","vendor","modelName","model","deviceYearClass","deviceType","totalMemory","deviceMemory","supportedCpuArchitectures","cpu","architecture","osName","os","name","osVersion","version","osBuildId","osInternalBuildId","deviceName","getDeviceTypeAsync","isRootedExperimentalAsync"],"sources":["D:\\HK2_Nam4\\CNM\\BTL\\New_3\\AppZalo_CNM\\Frontend\\Mobile\\zalofake\\node_modules\\expo-device\\src\\ExpoDevice.web.ts"],"sourcesContent":["import { Platform } from 'expo-modules-core';\nimport UAParser from 'ua-parser-js';\n\nimport { DeviceType } from './Device.types';\n\ntype NavigatorWithDeviceMemory = Navigator & { deviceMemory: number };\n\nlet result: any = null;\nif (Platform.isDOMAvailable) {\n  const parser = new UAParser(window.navigator.userAgent);\n  result = parser.getResult();\n}\n\nfunction convertGiBtoBytes(gib: number): number {\n  return Math.round(gib * 1024 ** 3);\n}\n\nfunction getDeviceType(): DeviceType {\n  switch (result?.device?.type) {\n    case 'mobile':\n      return DeviceType.PHONE;\n    case 'tablet':\n      return DeviceType.TABLET;\n    case 'smarttv':\n      return DeviceType.TV;\n    case 'console':\n    case 'embedded':\n    case 'wearable':\n      return DeviceType.UNKNOWN;\n    default:\n      return DeviceType.DESKTOP;\n  }\n}\n\nexport default {\n  get isDevice(): boolean {\n    return true;\n  },\n  get brand(): null {\n    return null;\n  },\n  get manufacturer(): null {\n    return (result && result.device.vendor) || null;\n  },\n  get modelName(): string | null {\n    return (result && result.device.model) || null;\n  },\n  get deviceYearClass(): null {\n    return null;\n  },\n  get deviceType(): DeviceType {\n    return getDeviceType();\n  },\n  get totalMemory(): number | null {\n    if (Platform.isDOMAvailable && 'deviceMemory' in navigator) {\n      const { deviceMemory } = navigator as NavigatorWithDeviceMemory;\n      return convertGiBtoBytes(deviceMemory);\n    }\n    return null;\n  },\n  get supportedCpuArchitectures(): string[] | null {\n    return result && result.cpu.architecture ? [result.cpu.architecture] : null;\n  },\n  get osName(): string {\n    return (result && result.os.name) || '';\n  },\n  get osVersion(): string {\n    return (result && result.os.version) || '';\n  },\n  get osBuildId(): null {\n    return null;\n  },\n  get osInternalBuildId(): null {\n    return null;\n  },\n  get deviceName(): null {\n    return null;\n  },\n  async getDeviceTypeAsync(): Promise<DeviceType> {\n    return getDeviceType();\n  },\n  async isRootedExperimentalAsync(): Promise<boolean> {\n    return false;\n  },\n};\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,mBAAmB;AAC5C,OAAOC,QAAQ,MAAM,cAAc;AAEnC,SAASC,UAAU,QAAQ,gBAAgB;AAI3C,IAAIC,MAAM,GAAQ,IAAI;AACtB,IAAIH,QAAQ,CAACI,cAAc,EAAE;EAC3B,MAAMC,MAAM,GAAG,IAAIJ,QAAQ,CAACK,MAAM,CAACC,SAAS,CAACC,SAAS,CAAC;EACvDL,MAAM,GAAGE,MAAM,CAACI,SAAS,EAAE;;AAG7B,SAASC,iBAAiBA,CAACC,GAAW;EACpC,OAAOC,IAAI,CAACC,KAAK,CAACF,GAAG,GAAG,IAAI,IAAI,CAAC,CAAC;AACpC;AAEA,SAASG,aAAaA,CAAA;EACpB,QAAQX,MAAM,EAAEY,MAAM,EAAEC,IAAI;IAC1B,KAAK,QAAQ;MACX,OAAOd,UAAU,CAACe,KAAK;IACzB,KAAK,QAAQ;MACX,OAAOf,UAAU,CAACgB,MAAM;IAC1B,KAAK,SAAS;MACZ,OAAOhB,UAAU,CAACiB,EAAE;IACtB,KAAK,SAAS;IACd,KAAK,UAAU;IACf,KAAK,UAAU;MACb,OAAOjB,UAAU,CAACkB,OAAO;IAC3B;MACE,OAAOlB,UAAU,CAACmB,OAAO;;AAE/B;AAEA,eAAe;EACb,IAAIC,QAAQA,CAAA;IACV,OAAO,IAAI;EACb,CAAC;EACD,IAAIC,KAAKA,CAAA;IACP,OAAO,IAAI;EACb,CAAC;EACD,IAAIC,YAAYA,CAAA;IACd,OAAQrB,MAAM,IAAIA,MAAM,CAACY,MAAM,CAACU,MAAM,IAAK,IAAI;EACjD,CAAC;EACD,IAAIC,SAASA,CAAA;IACX,OAAQvB,MAAM,IAAIA,MAAM,CAACY,MAAM,CAACY,KAAK,IAAK,IAAI;EAChD,CAAC;EACD,IAAIC,eAAeA,CAAA;IACjB,OAAO,IAAI;EACb,CAAC;EACD,IAAIC,UAAUA,CAAA;IACZ,OAAOf,aAAa,EAAE;EACxB,CAAC;EACD,IAAIgB,WAAWA,CAAA;IACb,IAAI9B,QAAQ,CAACI,cAAc,IAAI,cAAc,IAAIG,SAAS,EAAE;MAC1D,MAAM;QAAEwB;MAAY,CAAE,GAAGxB,SAAsC;MAC/D,OAAOG,iBAAiB,CAACqB,YAAY,CAAC;;IAExC,OAAO,IAAI;EACb,CAAC;EACD,IAAIC,yBAAyBA,CAAA;IAC3B,OAAO7B,MAAM,IAAIA,MAAM,CAAC8B,GAAG,CAACC,YAAY,GAAG,CAAC/B,MAAM,CAAC8B,GAAG,CAACC,YAAY,CAAC,GAAG,IAAI;EAC7E,CAAC;EACD,IAAIC,MAAMA,CAAA;IACR,OAAQhC,MAAM,IAAIA,MAAM,CAACiC,EAAE,CAACC,IAAI,IAAK,EAAE;EACzC,CAAC;EACD,IAAIC,SAASA,CAAA;IACX,OAAQnC,MAAM,IAAIA,MAAM,CAACiC,EAAE,CAACG,OAAO,IAAK,EAAE;EAC5C,CAAC;EACD,IAAIC,SAASA,CAAA;IACX,OAAO,IAAI;EACb,CAAC;EACD,IAAIC,iBAAiBA,CAAA;IACnB,OAAO,IAAI;EACb,CAAC;EACD,IAAIC,UAAUA,CAAA;IACZ,OAAO,IAAI;EACb,CAAC;EACD,MAAMC,kBAAkBA,CAAA;IACtB,OAAO7B,aAAa,EAAE;EACxB,CAAC;EACD,MAAM8B,yBAAyBA,CAAA;IAC7B,OAAO,KAAK;EACd;CACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}