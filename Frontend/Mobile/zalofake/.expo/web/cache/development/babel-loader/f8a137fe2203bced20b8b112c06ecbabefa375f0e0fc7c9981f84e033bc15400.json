{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React from 'react';\nimport { AdornmentSide, AdornmentType, InputMode } from './enums';\nimport TextInputAffix, { AffixAdornment } from './TextInputAffix';\nimport TextInputIcon, { IconAdornment } from './TextInputIcon';\nimport { getConstants } from '../helpers';\nexport function getAdornmentConfig(_ref) {\n  let {\n    left,\n    right\n  } = _ref;\n  let adornmentConfig = [];\n  if (left || right) {\n    [{\n      side: AdornmentSide.Left,\n      adornment: left\n    }, {\n      side: AdornmentSide.Right,\n      adornment: right\n    }].forEach(_ref2 => {\n      let {\n        side,\n        adornment\n      } = _ref2;\n      if (adornment && React.isValidElement(adornment)) {\n        let type;\n        if (adornment.type === TextInputAffix) {\n          type = AdornmentType.Affix;\n        } else if (adornment.type === TextInputIcon) {\n          type = AdornmentType.Icon;\n        }\n        adornmentConfig.push({\n          side,\n          type\n        });\n      }\n    });\n  }\n  return adornmentConfig;\n}\nexport function getAdornmentStyleAdjustmentForNativeInput(_ref3) {\n  let {\n    adornmentConfig,\n    leftAffixWidth,\n    rightAffixWidth,\n    paddingHorizontal,\n    inputOffset = 0,\n    mode,\n    isV3\n  } = _ref3;\n  const {\n    OUTLINED_INPUT_OFFSET,\n    ADORNMENT_OFFSET\n  } = getConstants(isV3);\n  if (adornmentConfig.length) {\n    const adornmentStyleAdjustmentForNativeInput = adornmentConfig.map(_ref4 => {\n      let {\n        type,\n        side\n      } = _ref4;\n      const isLeftSide = side === AdornmentSide.Left;\n      const inputModeAdornemntOffset = mode === InputMode.Outlined ? ADORNMENT_OFFSET + OUTLINED_INPUT_OFFSET : ADORNMENT_OFFSET;\n      const paddingKey = `padding${captalize(side)}`;\n      const affixWidth = isLeftSide ? leftAffixWidth : rightAffixWidth;\n      const padding = typeof paddingHorizontal === 'number' ? paddingHorizontal : inputModeAdornemntOffset;\n      const offset = affixWidth + padding;\n      const isAffix = type === AdornmentType.Affix;\n      const marginKey = `margin${captalize(side)}`;\n      return {\n        [marginKey]: isAffix ? 0 : offset,\n        [paddingKey]: isAffix ? offset : inputOffset\n      };\n    });\n    const allStyleAdjustmentsMerged = adornmentStyleAdjustmentForNativeInput.reduce((mergedStyles, currentStyle) => {\n      return _objectSpread(_objectSpread({}, mergedStyles), currentStyle);\n    }, {});\n    return allStyleAdjustmentsMerged;\n  } else {\n    return [{}];\n  }\n}\nconst captalize = text => text.charAt(0).toUpperCase() + text.slice(1);\nconst TextInputAdornment = _ref5 => {\n  let {\n    adornmentConfig,\n    left,\n    right,\n    onAffixChange,\n    textStyle,\n    visible,\n    topPosition,\n    isTextInputFocused,\n    forceFocus,\n    paddingHorizontal,\n    maxFontSizeMultiplier,\n    theme,\n    disabled\n  } = _ref5;\n  if (adornmentConfig.length) {\n    return React.createElement(React.Fragment, null, adornmentConfig.map(_ref6 => {\n      let {\n        type,\n        side\n      } = _ref6;\n      let inputAdornmentComponent;\n      if (side === AdornmentSide.Left) {\n        inputAdornmentComponent = left;\n      } else if (side === AdornmentSide.Right) {\n        inputAdornmentComponent = right;\n      }\n      const commonProps = {\n        side: side,\n        testID: `${side}-${type}-adornment`,\n        isTextInputFocused,\n        paddingHorizontal,\n        disabled\n      };\n      if (type === AdornmentType.Icon) {\n        return React.createElement(IconAdornment, _extends({}, commonProps, {\n          theme: theme,\n          key: side,\n          icon: inputAdornmentComponent,\n          topPosition: topPosition[AdornmentType.Icon],\n          forceFocus: forceFocus\n        }));\n      } else if (type === AdornmentType.Affix) {\n        return React.createElement(AffixAdornment, _extends({}, commonProps, {\n          key: side,\n          topPosition: topPosition[AdornmentType.Affix][side],\n          affix: inputAdornmentComponent,\n          textStyle: textStyle,\n          onLayout: onAffixChange[side],\n          visible: visible,\n          maxFontSizeMultiplier: maxFontSizeMultiplier\n        }));\n      } else {\n        return null;\n      }\n    }));\n  } else {\n    return null;\n  }\n};\nexport default TextInputAdornment;","map":{"version":3,"names":["React","AdornmentSide","AdornmentType","InputMode","TextInputAffix","AffixAdornment","TextInputIcon","IconAdornment","getConstants","getAdornmentConfig","_ref","left","right","adornmentConfig","side","Left","adornment","Right","forEach","_ref2","isValidElement","type","Affix","Icon","push","getAdornmentStyleAdjustmentForNativeInput","_ref3","leftAffixWidth","rightAffixWidth","paddingHorizontal","inputOffset","mode","isV3","OUTLINED_INPUT_OFFSET","ADORNMENT_OFFSET","length","adornmentStyleAdjustmentForNativeInput","map","_ref4","isLeftSide","inputModeAdornemntOffset","Outlined","paddingKey","captalize","affixWidth","padding","offset","isAffix","marginKey","allStyleAdjustmentsMerged","reduce","mergedStyles","currentStyle","_objectSpread","text","charAt","toUpperCase","slice","TextInputAdornment","_ref5","onAffixChange","textStyle","visible","topPosition","isTextInputFocused","forceFocus","maxFontSizeMultiplier","theme","disabled","createElement","Fragment","_ref6","inputAdornmentComponent","commonProps","testID","_extends","key","icon","affix","onLayout"],"sources":["D:\\HK2_Nam4\\CNM\\BTL\\New_3\\AppZalo_CNM\\Frontend\\Mobile\\zalofake\\node_modules\\react-native-paper\\src\\components\\TextInput\\Adornment\\TextInputAdornment.tsx"],"sourcesContent":["import React from 'react';\nimport type {\n  LayoutChangeEvent,\n  TextStyle,\n  StyleProp,\n  Animated,\n} from 'react-native';\n\nimport type { ThemeProp } from 'src/types';\n\nimport { AdornmentSide, AdornmentType, InputMode } from './enums';\nimport TextInputAffix, { AffixAdornment } from './TextInputAffix';\nimport TextInputIcon, { IconAdornment } from './TextInputIcon';\nimport type {\n  AdornmentConfig,\n  AdornmentStyleAdjustmentForNativeInput,\n} from './types';\nimport { getConstants } from '../helpers';\n\nexport function getAdornmentConfig({\n  left,\n  right,\n}: {\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n}): Array<AdornmentConfig> {\n  let adornmentConfig: any[] = [];\n  if (left || right) {\n    [\n      { side: AdornmentSide.Left, adornment: left },\n      { side: AdornmentSide.Right, adornment: right },\n    ].forEach(({ side, adornment }) => {\n      if (adornment && React.isValidElement(adornment)) {\n        let type;\n        if (adornment.type === TextInputAffix) {\n          type = AdornmentType.Affix;\n        } else if (adornment.type === TextInputIcon) {\n          type = AdornmentType.Icon;\n        }\n        adornmentConfig.push({\n          side,\n          type,\n        });\n      }\n    });\n  }\n\n  return adornmentConfig;\n}\n\nexport function getAdornmentStyleAdjustmentForNativeInput({\n  adornmentConfig,\n  leftAffixWidth,\n  rightAffixWidth,\n  paddingHorizontal,\n  inputOffset = 0,\n  mode,\n  isV3,\n}: {\n  inputOffset?: number;\n  adornmentConfig: AdornmentConfig[];\n  leftAffixWidth: number;\n  rightAffixWidth: number;\n  mode?: 'outlined' | 'flat';\n  paddingHorizontal?: number | string;\n  isV3?: boolean;\n}): AdornmentStyleAdjustmentForNativeInput | {} {\n  const { OUTLINED_INPUT_OFFSET, ADORNMENT_OFFSET } = getConstants(isV3);\n\n  if (adornmentConfig.length) {\n    const adornmentStyleAdjustmentForNativeInput = adornmentConfig.map(\n      ({ type, side }: AdornmentConfig) => {\n        const isLeftSide = side === AdornmentSide.Left;\n        const inputModeAdornemntOffset =\n          mode === InputMode.Outlined\n            ? ADORNMENT_OFFSET + OUTLINED_INPUT_OFFSET\n            : ADORNMENT_OFFSET;\n        const paddingKey = `padding${captalize(side)}`;\n        const affixWidth = isLeftSide ? leftAffixWidth : rightAffixWidth;\n        const padding =\n          typeof paddingHorizontal === 'number'\n            ? paddingHorizontal\n            : inputModeAdornemntOffset;\n        const offset = affixWidth + padding;\n\n        const isAffix = type === AdornmentType.Affix;\n        const marginKey = `margin${captalize(side)}`;\n\n        return {\n          [marginKey]: isAffix ? 0 : offset,\n          [paddingKey]: isAffix ? offset : inputOffset,\n        };\n      }\n    );\n    const allStyleAdjustmentsMerged =\n      adornmentStyleAdjustmentForNativeInput.reduce(\n        (mergedStyles, currentStyle) => {\n          return {\n            ...mergedStyles,\n            ...currentStyle,\n          };\n        },\n        {}\n      );\n    return allStyleAdjustmentsMerged;\n  } else {\n    return [{}];\n  }\n}\n\nconst captalize = (text: string) =>\n  text.charAt(0).toUpperCase() + text.slice(1);\n\nexport interface TextInputAdornmentProps {\n  forceFocus: () => void;\n  adornmentConfig: AdornmentConfig[];\n  topPosition: {\n    [AdornmentType.Affix]: {\n      [AdornmentSide.Left]: number | null;\n      [AdornmentSide.Right]: number | null;\n    };\n    [AdornmentType.Icon]: number;\n  };\n  onAffixChange: {\n    [AdornmentSide.Left]: (event: LayoutChangeEvent) => void;\n    [AdornmentSide.Right]: (event: LayoutChangeEvent) => void;\n  };\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n  textStyle?: StyleProp<TextStyle>;\n  visible?: Animated.Value;\n  isTextInputFocused: boolean;\n  paddingHorizontal?: number | string;\n  maxFontSizeMultiplier?: number | undefined | null;\n  theme?: ThemeProp;\n  disabled?: boolean;\n}\n\nconst TextInputAdornment: React.FunctionComponent<TextInputAdornmentProps> = ({\n  adornmentConfig,\n  left,\n  right,\n  onAffixChange,\n  textStyle,\n  visible,\n  topPosition,\n  isTextInputFocused,\n  forceFocus,\n  paddingHorizontal,\n  maxFontSizeMultiplier,\n  theme,\n  disabled,\n}) => {\n  if (adornmentConfig.length) {\n    return (\n      <>\n        {adornmentConfig.map(({ type, side }: AdornmentConfig) => {\n          let inputAdornmentComponent;\n          if (side === AdornmentSide.Left) {\n            inputAdornmentComponent = left;\n          } else if (side === AdornmentSide.Right) {\n            inputAdornmentComponent = right;\n          }\n\n          const commonProps = {\n            side: side,\n            testID: `${side}-${type}-adornment`,\n            isTextInputFocused,\n            paddingHorizontal,\n            disabled,\n          };\n          if (type === AdornmentType.Icon) {\n            return (\n              <IconAdornment\n                {...commonProps}\n                theme={theme}\n                key={side}\n                icon={inputAdornmentComponent}\n                topPosition={topPosition[AdornmentType.Icon]}\n                forceFocus={forceFocus}\n              />\n            );\n          } else if (type === AdornmentType.Affix) {\n            return (\n              <AffixAdornment\n                {...commonProps}\n                key={side}\n                topPosition={topPosition[AdornmentType.Affix][side]}\n                affix={inputAdornmentComponent}\n                textStyle={textStyle}\n                onLayout={onAffixChange[side]}\n                visible={visible}\n                maxFontSizeMultiplier={maxFontSizeMultiplier}\n              />\n            );\n          } else {\n            return null;\n          }\n        })}\n      </>\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default TextInputAdornment;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}