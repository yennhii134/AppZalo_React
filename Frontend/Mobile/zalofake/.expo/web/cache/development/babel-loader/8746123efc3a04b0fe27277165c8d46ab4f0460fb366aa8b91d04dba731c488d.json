{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nconst _excluded = [\"icon\", \"iconColor\", \"containerColor\", \"rippleColor\", \"size\", \"accessibilityLabel\", \"disabled\", \"onPress\", \"selected\", \"animated\", \"mode\", \"style\", \"theme\", \"testID\", \"loading\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { getIconButtonColor } from './utils';\nimport { useInternalTheme } from '../../core/theming';\nimport { forwardRef } from '../../utils/forwardRef';\nimport ActivityIndicator from '../ActivityIndicator';\nimport CrossFadeIcon from '../CrossFadeIcon';\nimport Icon from '../Icon';\nimport Surface from '../Surface';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nconst PADDING = 8;\nconst IconButton = forwardRef((_ref, ref) => {\n  let {\n      icon,\n      iconColor: customIconColor,\n      containerColor: customContainerColor,\n      rippleColor: customRippleColor,\n      size = 24,\n      accessibilityLabel,\n      disabled,\n      onPress,\n      selected = false,\n      animated = false,\n      mode,\n      style,\n      theme: themeOverrides,\n      testID = 'icon-button',\n      loading = false\n    } = _ref,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  const theme = useInternalTheme(themeOverrides);\n  const {\n    isV3\n  } = theme;\n  const IconComponent = animated ? CrossFadeIcon : Icon;\n  const {\n    iconColor,\n    rippleColor,\n    backgroundColor,\n    borderColor\n  } = getIconButtonColor({\n    theme,\n    disabled,\n    selected,\n    mode,\n    customIconColor,\n    customContainerColor,\n    customRippleColor\n  });\n  const buttonSize = isV3 ? size + 2 * PADDING : size * 1.5;\n  const {\n    borderWidth = isV3 && mode === 'outlined' && !selected ? 1 : 0,\n    borderRadius = buttonSize / 2\n  } = StyleSheet.flatten(style) || {};\n  const borderStyles = {\n    borderWidth,\n    borderRadius,\n    borderColor\n  };\n  return React.createElement(Surface, _extends({\n    ref: ref,\n    testID: `${testID}-container`,\n    style: [{\n      backgroundColor,\n      width: buttonSize,\n      height: buttonSize\n    }, styles.container, borderStyles, !isV3 && disabled && styles.disabled, style]\n  }, isV3 && {\n    elevation: 0\n  }), React.createElement(TouchableRipple, _extends({\n    borderless: true,\n    centered: true,\n    onPress: onPress,\n    rippleColor: rippleColor,\n    accessibilityLabel: accessibilityLabel,\n    style: [styles.touchable, {\n      borderRadius\n    }],\n    accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      disabled\n    },\n    disabled: disabled,\n    hitSlop: TouchableRipple.supported ? {\n      top: 10,\n      left: 10,\n      bottom: 10,\n      right: 10\n    } : {\n      top: 6,\n      left: 6,\n      bottom: 6,\n      right: 6\n    },\n    testID: testID\n  }, rest), loading ? React.createElement(ActivityIndicator, {\n    size: size,\n    color: iconColor\n  }) : React.createElement(IconComponent, {\n    color: iconColor,\n    source: icon,\n    size: size\n  })));\n});\nconst styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden',\n    margin: 6,\n    elevation: 0\n  },\n  touchable: {\n    flexGrow: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  disabled: {\n    opacity: 0.32\n  }\n});\nexport default IconButton;","map":{"version":3,"names":["React","StyleSheet","getIconButtonColor","useInternalTheme","forwardRef","ActivityIndicator","CrossFadeIcon","Icon","Surface","TouchableRipple","PADDING","IconButton","_ref","ref","icon","iconColor","customIconColor","containerColor","customContainerColor","rippleColor","customRippleColor","size","accessibilityLabel","disabled","onPress","selected","animated","mode","style","theme","themeOverrides","testID","loading","rest","_objectWithoutProperties","_excluded","isV3","IconComponent","backgroundColor","borderColor","buttonSize","borderWidth","borderRadius","flatten","borderStyles","createElement","_extends","width","height","styles","container","elevation","borderless","centered","touchable","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","hitSlop","supported","top","left","bottom","right","color","source","create","overflow","margin","flexGrow","justifyContent","alignItems","opacity"],"sources":["D:\\HK2_Nam4\\CNM\\BTL\\New_3\\AppZalo_CNM\\Frontend\\Mobile\\zalofake\\node_modules\\react-native-paper\\src\\components\\IconButton\\IconButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  GestureResponderEvent,\n  StyleProp,\n  StyleSheet,\n  ViewStyle,\n  View,\n  Animated,\n  ColorValue,\n} from 'react-native';\n\nimport { getIconButtonColor } from './utils';\nimport { useInternalTheme } from '../../core/theming';\nimport type { $RemoveChildren, ThemeProp } from '../../types';\nimport { forwardRef } from '../../utils/forwardRef';\nimport ActivityIndicator from '../ActivityIndicator';\nimport CrossFadeIcon from '../CrossFadeIcon';\nimport Icon, { IconSource } from '../Icon';\nimport Surface from '../Surface';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\n\nconst PADDING = 8;\n\ntype IconButtonMode = 'outlined' | 'contained' | 'contained-tonal';\n\nexport type Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Icon to display.\n   */\n  icon: IconSource;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Mode of the icon button. By default there is no specified mode - only pressable icon will be rendered.\n   */\n  mode?: IconButtonMode;\n  /**\n   * @renamed Renamed from 'color' to 'iconColor' in v5.x\n   * Color of the icon.\n   */\n  iconColor?: string;\n  /**\n   * Background color of the icon container.\n   */\n  containerColor?: string;\n  /**\n   * Color of the ripple effect.\n   */\n  rippleColor?: ColorValue;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Whether icon button is selected. A selected button receives alternative combination of icon and container colors.\n   */\n  selected?: boolean;\n  /**\n   * Size of the icon.\n   */\n  size?: number;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Whether an icon change is animated.\n   */\n  animated?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  style?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  ref?: React.RefObject<View>;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n  /**\n   * Whether to show a loading indicator.\n   */\n  loading?: boolean;\n};\n\n/**\n * An icon button is a button which displays only an icon without a label.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { IconButton, MD3Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <IconButton\n *     icon=\"camera\"\n *     iconColor={MD3Colors.error50}\n *     size={20}\n *     onPress={() => console.log('Pressed')}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends TouchableRipple props https://callstack.github.io/react-native-paper/docs/components/TouchableRipple\n */\nconst IconButton = forwardRef<View, Props>(\n  (\n    {\n      icon,\n      iconColor: customIconColor,\n      containerColor: customContainerColor,\n      rippleColor: customRippleColor,\n      size = 24,\n      accessibilityLabel,\n      disabled,\n      onPress,\n      selected = false,\n      animated = false,\n      mode,\n      style,\n      theme: themeOverrides,\n      testID = 'icon-button',\n      loading = false,\n      ...rest\n    }: Props,\n    ref\n  ) => {\n    const theme = useInternalTheme(themeOverrides);\n    const { isV3 } = theme;\n\n    const IconComponent = animated ? CrossFadeIcon : Icon;\n\n    const { iconColor, rippleColor, backgroundColor, borderColor } =\n      getIconButtonColor({\n        theme,\n        disabled,\n        selected,\n        mode,\n        customIconColor,\n        customContainerColor,\n        customRippleColor,\n      });\n\n    const buttonSize = isV3 ? size + 2 * PADDING : size * 1.5;\n\n    const {\n      borderWidth = isV3 && mode === 'outlined' && !selected ? 1 : 0,\n      borderRadius = buttonSize / 2,\n    } = (StyleSheet.flatten(style) || {}) as ViewStyle;\n\n    const borderStyles = {\n      borderWidth,\n      borderRadius,\n      borderColor,\n    };\n\n    return (\n      <Surface\n        ref={ref}\n        testID={`${testID}-container`}\n        style={[\n          {\n            backgroundColor,\n            width: buttonSize,\n            height: buttonSize,\n          },\n          styles.container,\n          borderStyles,\n          !isV3 && disabled && styles.disabled,\n          style,\n        ]}\n        {...(isV3 && { elevation: 0 })}\n      >\n        <TouchableRipple\n          borderless\n          centered\n          onPress={onPress}\n          rippleColor={rippleColor}\n          accessibilityLabel={accessibilityLabel}\n          style={[styles.touchable, { borderRadius }]}\n          // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n          accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n          accessibilityState={{ disabled }}\n          disabled={disabled}\n          hitSlop={\n            TouchableRipple.supported\n              ? { top: 10, left: 10, bottom: 10, right: 10 }\n              : { top: 6, left: 6, bottom: 6, right: 6 }\n          }\n          testID={testID}\n          {...rest}\n        >\n          {loading ? (\n            <ActivityIndicator size={size} color={iconColor} />\n          ) : (\n            <IconComponent color={iconColor} source={icon} size={size} />\n          )}\n        </TouchableRipple>\n      </Surface>\n    );\n  }\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden',\n    margin: 6,\n    elevation: 0,\n  },\n  touchable: {\n    flexGrow: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  disabled: {\n    opacity: 0.32,\n  },\n});\n\nexport default IconButton;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}