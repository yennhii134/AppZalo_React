{"ast":null,"code":"import StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport color from 'color';\nimport { black, white } from '../../styles/themes/v2/colors';\nconst isDark = _ref => {\n  let {\n    dark,\n    backgroundColor\n  } = _ref;\n  if (typeof dark === 'boolean') {\n    return dark;\n  }\n  if (backgroundColor === 'transparent') {\n    return false;\n  }\n  if (backgroundColor !== 'transparent') {\n    return !color(backgroundColor).isLight();\n  }\n  return false;\n};\nconst getButtonBackgroundColor = _ref2 => {\n  let {\n    isMode,\n    theme,\n    disabled,\n    customButtonColor\n  } = _ref2;\n  if (customButtonColor && !disabled) {\n    return customButtonColor;\n  }\n  if (theme.isV3) {\n    if (disabled) {\n      if (isMode('outlined') || isMode('text')) {\n        return 'transparent';\n      }\n      return theme.colors.surfaceDisabled;\n    }\n    if (isMode('elevated')) {\n      return theme.colors.elevation.level1;\n    }\n    if (isMode('contained')) {\n      return theme.colors.primary;\n    }\n    if (isMode('contained-tonal')) {\n      return theme.colors.secondaryContainer;\n    }\n  }\n  if (isMode('contained')) {\n    if (disabled) {\n      return color(theme.dark ? white : black).alpha(0.12).rgb().string();\n    }\n    return theme.colors.primary;\n  }\n  return 'transparent';\n};\nconst getButtonTextColor = _ref3 => {\n  let {\n    isMode,\n    theme,\n    disabled,\n    customTextColor,\n    backgroundColor,\n    dark\n  } = _ref3;\n  if (customTextColor && !disabled) {\n    return customTextColor;\n  }\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n    if (typeof dark === 'boolean') {\n      if (isMode('contained') || isMode('contained-tonal') || isMode('elevated')) {\n        return isDark({\n          dark,\n          backgroundColor\n        }) ? white : black;\n      }\n    }\n    if (isMode('outlined') || isMode('text') || isMode('elevated')) {\n      return theme.colors.primary;\n    }\n    if (isMode('contained')) {\n      return theme.colors.onPrimary;\n    }\n    if (isMode('contained-tonal')) {\n      return theme.colors.onSecondaryContainer;\n    }\n  }\n  if (disabled) {\n    return color(theme.dark ? white : black).alpha(0.32).rgb().string();\n  }\n  if (isMode('contained')) {\n    return isDark({\n      dark,\n      backgroundColor\n    }) ? white : black;\n  }\n  return theme.colors.primary;\n};\nconst getButtonBorderColor = _ref4 => {\n  let {\n    isMode,\n    disabled,\n    theme\n  } = _ref4;\n  if (theme.isV3) {\n    if (disabled && isMode('outlined')) {\n      return theme.colors.surfaceDisabled;\n    }\n    if (isMode('outlined')) {\n      return theme.colors.outline;\n    }\n  }\n  if (isMode('outlined')) {\n    return color(theme.dark ? white : black).alpha(0.29).rgb().string();\n  }\n  return 'transparent';\n};\nconst getButtonBorderWidth = _ref5 => {\n  let {\n    isMode,\n    theme\n  } = _ref5;\n  if (theme.isV3) {\n    if (isMode('outlined')) {\n      return 1;\n    }\n  }\n  if (isMode('outlined')) {\n    return StyleSheet.hairlineWidth;\n  }\n  return 0;\n};\nexport const getButtonColors = _ref6 => {\n  let {\n    theme,\n    mode,\n    customButtonColor,\n    customTextColor,\n    disabled,\n    dark\n  } = _ref6;\n  const isMode = modeToCompare => {\n    return mode === modeToCompare;\n  };\n  const backgroundColor = getButtonBackgroundColor({\n    isMode,\n    theme,\n    disabled,\n    customButtonColor\n  });\n  const textColor = getButtonTextColor({\n    isMode,\n    theme,\n    disabled,\n    customTextColor,\n    backgroundColor,\n    dark\n  });\n  const borderColor = getButtonBorderColor({\n    isMode,\n    theme,\n    disabled\n  });\n  const borderWidth = getButtonBorderWidth({\n    isMode,\n    theme\n  });\n  return {\n    backgroundColor,\n    borderColor,\n    textColor,\n    borderWidth\n  };\n};","map":{"version":3,"names":["color","black","white","isDark","_ref","dark","backgroundColor","isLight","getButtonBackgroundColor","_ref2","isMode","theme","disabled","customButtonColor","isV3","colors","surfaceDisabled","elevation","level1","primary","secondaryContainer","alpha","rgb","string","getButtonTextColor","_ref3","customTextColor","onSurfaceDisabled","onPrimary","onSecondaryContainer","getButtonBorderColor","_ref4","outline","getButtonBorderWidth","_ref5","StyleSheet","hairlineWidth","getButtonColors","_ref6","mode","modeToCompare","textColor","borderColor","borderWidth"],"sources":["D:\\HK2_Nam4\\CNM\\BTL\\New_3\\AppZalo_CNM\\Frontend\\Mobile\\zalofake\\node_modules\\react-native-paper\\src\\components\\Button\\utils.tsx"],"sourcesContent":["import { StyleSheet } from 'react-native';\n\nimport color from 'color';\n\nimport { black, white } from '../../styles/themes/v2/colors';\nimport type { InternalTheme } from '../../types';\n\nexport type ButtonMode =\n  | 'text'\n  | 'outlined'\n  | 'contained'\n  | 'elevated'\n  | 'contained-tonal';\n\ntype BaseProps = {\n  isMode: (mode: ButtonMode) => boolean;\n  theme: InternalTheme;\n  disabled?: boolean;\n};\n\nconst isDark = ({\n  dark,\n  backgroundColor,\n}: {\n  dark?: boolean;\n  backgroundColor?: string;\n}) => {\n  if (typeof dark === 'boolean') {\n    return dark;\n  }\n\n  if (backgroundColor === 'transparent') {\n    return false;\n  }\n\n  if (backgroundColor !== 'transparent') {\n    return !color(backgroundColor).isLight();\n  }\n\n  return false;\n};\n\nconst getButtonBackgroundColor = ({\n  isMode,\n  theme,\n  disabled,\n  customButtonColor,\n}: BaseProps & {\n  customButtonColor?: string;\n}) => {\n  if (customButtonColor && !disabled) {\n    return customButtonColor;\n  }\n\n  if (theme.isV3) {\n    if (disabled) {\n      if (isMode('outlined') || isMode('text')) {\n        return 'transparent';\n      }\n\n      return theme.colors.surfaceDisabled;\n    }\n\n    if (isMode('elevated')) {\n      return theme.colors.elevation.level1;\n    }\n\n    if (isMode('contained')) {\n      return theme.colors.primary;\n    }\n\n    if (isMode('contained-tonal')) {\n      return theme.colors.secondaryContainer;\n    }\n  }\n\n  if (isMode('contained')) {\n    if (disabled) {\n      return color(theme.dark ? white : black)\n        .alpha(0.12)\n        .rgb()\n        .string();\n    }\n\n    return theme.colors.primary;\n  }\n\n  return 'transparent';\n};\n\nconst getButtonTextColor = ({\n  isMode,\n  theme,\n  disabled,\n  customTextColor,\n  backgroundColor,\n  dark,\n}: BaseProps & {\n  customTextColor?: string;\n  backgroundColor: string;\n  dark?: boolean;\n}) => {\n  if (customTextColor && !disabled) {\n    return customTextColor;\n  }\n\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n\n    if (typeof dark === 'boolean') {\n      if (\n        isMode('contained') ||\n        isMode('contained-tonal') ||\n        isMode('elevated')\n      ) {\n        return isDark({ dark, backgroundColor }) ? white : black;\n      }\n    }\n\n    if (isMode('outlined') || isMode('text') || isMode('elevated')) {\n      return theme.colors.primary;\n    }\n\n    if (isMode('contained')) {\n      return theme.colors.onPrimary;\n    }\n\n    if (isMode('contained-tonal')) {\n      return theme.colors.onSecondaryContainer;\n    }\n  }\n\n  if (disabled) {\n    return color(theme.dark ? white : black)\n      .alpha(0.32)\n      .rgb()\n      .string();\n  }\n\n  if (isMode('contained')) {\n    return isDark({ dark, backgroundColor }) ? white : black;\n  }\n\n  return theme.colors.primary;\n};\n\nconst getButtonBorderColor = ({ isMode, disabled, theme }: BaseProps) => {\n  if (theme.isV3) {\n    if (disabled && isMode('outlined')) {\n      return theme.colors.surfaceDisabled;\n    }\n\n    if (isMode('outlined')) {\n      return theme.colors.outline;\n    }\n  }\n\n  if (isMode('outlined')) {\n    return color(theme.dark ? white : black)\n      .alpha(0.29)\n      .rgb()\n      .string();\n  }\n\n  return 'transparent';\n};\n\nconst getButtonBorderWidth = ({\n  isMode,\n  theme,\n}: Omit<BaseProps, 'disabled'>) => {\n  if (theme.isV3) {\n    if (isMode('outlined')) {\n      return 1;\n    }\n  }\n\n  if (isMode('outlined')) {\n    return StyleSheet.hairlineWidth;\n  }\n\n  return 0;\n};\n\nexport const getButtonColors = ({\n  theme,\n  mode,\n  customButtonColor,\n  customTextColor,\n  disabled,\n  dark,\n}: {\n  theme: InternalTheme;\n  mode: ButtonMode;\n  customButtonColor?: string;\n  customTextColor?: string;\n  disabled?: boolean;\n  dark?: boolean;\n}) => {\n  const isMode = (modeToCompare: ButtonMode) => {\n    return mode === modeToCompare;\n  };\n\n  const backgroundColor = getButtonBackgroundColor({\n    isMode,\n    theme,\n    disabled,\n    customButtonColor,\n  });\n\n  const textColor = getButtonTextColor({\n    isMode,\n    theme,\n    disabled,\n    customTextColor,\n    backgroundColor,\n    dark,\n  });\n\n  const borderColor = getButtonBorderColor({ isMode, theme, disabled });\n\n  const borderWidth = getButtonBorderWidth({ isMode, theme });\n\n  return {\n    backgroundColor,\n    borderColor,\n    textColor,\n    borderWidth,\n  };\n};\n"],"mappings":";AAEA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,KAAK,EAAEC,KAAK,QAAQ,+BAA+B;AAgB5D,MAAMC,MAAM,GAAGC,IAAA,IAMT;EAAA,IANU;IACdC,IAAI;IACJC;EAIF,CAAC,GAAAF,IAAA;EACC,IAAI,OAAOC,IAAI,KAAK,SAAS,EAAE;IAC7B,OAAOA,IAAI;EACb;EAEA,IAAIC,eAAe,KAAK,aAAa,EAAE;IACrC,OAAO,KAAK;EACd;EAEA,IAAIA,eAAe,KAAK,aAAa,EAAE;IACrC,OAAO,CAACN,KAAK,CAACM,eAAe,CAAC,CAACC,OAAO,CAAC,CAAC;EAC1C;EAEA,OAAO,KAAK;AACd,CAAC;AAED,MAAMC,wBAAwB,GAAGC,KAAA,IAO3B;EAAA,IAP4B;IAChCC,MAAM;IACNC,KAAK;IACLC,QAAQ;IACRC;EAGF,CAAC,GAAAJ,KAAA;EACC,IAAII,iBAAiB,IAAI,CAACD,QAAQ,EAAE;IAClC,OAAOC,iBAAiB;EAC1B;EAEA,IAAIF,KAAK,CAACG,IAAI,EAAE;IACd,IAAIF,QAAQ,EAAE;MACZ,IAAIF,MAAM,CAAC,UAAU,CAAC,IAAIA,MAAM,CAAC,MAAM,CAAC,EAAE;QACxC,OAAO,aAAa;MACtB;MAEA,OAAOC,KAAK,CAACI,MAAM,CAACC,eAAe;IACrC;IAEA,IAAIN,MAAM,CAAC,UAAU,CAAC,EAAE;MACtB,OAAOC,KAAK,CAACI,MAAM,CAACE,SAAS,CAACC,MAAM;IACtC;IAEA,IAAIR,MAAM,CAAC,WAAW,CAAC,EAAE;MACvB,OAAOC,KAAK,CAACI,MAAM,CAACI,OAAO;IAC7B;IAEA,IAAIT,MAAM,CAAC,iBAAiB,CAAC,EAAE;MAC7B,OAAOC,KAAK,CAACI,MAAM,CAACK,kBAAkB;IACxC;EACF;EAEA,IAAIV,MAAM,CAAC,WAAW,CAAC,EAAE;IACvB,IAAIE,QAAQ,EAAE;MACZ,OAAOZ,KAAK,CAACW,KAAK,CAACN,IAAI,GAAGH,KAAK,GAAGD,KAAK,CAAC,CACrCoB,KAAK,CAAC,IAAI,CAAC,CACXC,GAAG,CAAC,CAAC,CACLC,MAAM,CAAC,CAAC;IACb;IAEA,OAAOZ,KAAK,CAACI,MAAM,CAACI,OAAO;EAC7B;EAEA,OAAO,aAAa;AACtB,CAAC;AAED,MAAMK,kBAAkB,GAAGC,KAAA,IAWrB;EAAA,IAXsB;IAC1Bf,MAAM;IACNC,KAAK;IACLC,QAAQ;IACRc,eAAe;IACfpB,eAAe;IACfD;EAKF,CAAC,GAAAoB,KAAA;EACC,IAAIC,eAAe,IAAI,CAACd,QAAQ,EAAE;IAChC,OAAOc,eAAe;EACxB;EAEA,IAAIf,KAAK,CAACG,IAAI,EAAE;IACd,IAAIF,QAAQ,EAAE;MACZ,OAAOD,KAAK,CAACI,MAAM,CAACY,iBAAiB;IACvC;IAEA,IAAI,OAAOtB,IAAI,KAAK,SAAS,EAAE;MAC7B,IACEK,MAAM,CAAC,WAAW,CAAC,IACnBA,MAAM,CAAC,iBAAiB,CAAC,IACzBA,MAAM,CAAC,UAAU,CAAC,EAClB;QACA,OAAOP,MAAM,CAAC;UAAEE,IAAI;UAAEC;QAAgB,CAAC,CAAC,GAAGJ,KAAK,GAAGD,KAAK;MAC1D;IACF;IAEA,IAAIS,MAAM,CAAC,UAAU,CAAC,IAAIA,MAAM,CAAC,MAAM,CAAC,IAAIA,MAAM,CAAC,UAAU,CAAC,EAAE;MAC9D,OAAOC,KAAK,CAACI,MAAM,CAACI,OAAO;IAC7B;IAEA,IAAIT,MAAM,CAAC,WAAW,CAAC,EAAE;MACvB,OAAOC,KAAK,CAACI,MAAM,CAACa,SAAS;IAC/B;IAEA,IAAIlB,MAAM,CAAC,iBAAiB,CAAC,EAAE;MAC7B,OAAOC,KAAK,CAACI,MAAM,CAACc,oBAAoB;IAC1C;EACF;EAEA,IAAIjB,QAAQ,EAAE;IACZ,OAAOZ,KAAK,CAACW,KAAK,CAACN,IAAI,GAAGH,KAAK,GAAGD,KAAK,CAAC,CACrCoB,KAAK,CAAC,IAAI,CAAC,CACXC,GAAG,CAAC,CAAC,CACLC,MAAM,CAAC,CAAC;EACb;EAEA,IAAIb,MAAM,CAAC,WAAW,CAAC,EAAE;IACvB,OAAOP,MAAM,CAAC;MAAEE,IAAI;MAAEC;IAAgB,CAAC,CAAC,GAAGJ,KAAK,GAAGD,KAAK;EAC1D;EAEA,OAAOU,KAAK,CAACI,MAAM,CAACI,OAAO;AAC7B,CAAC;AAED,MAAMW,oBAAoB,GAAGC,KAAA,IAA4C;EAAA,IAA3C;IAAErB,MAAM;IAAEE,QAAQ;IAAED;EAAiB,CAAC,GAAAoB,KAAA;EAClE,IAAIpB,KAAK,CAACG,IAAI,EAAE;IACd,IAAIF,QAAQ,IAAIF,MAAM,CAAC,UAAU,CAAC,EAAE;MAClC,OAAOC,KAAK,CAACI,MAAM,CAACC,eAAe;IACrC;IAEA,IAAIN,MAAM,CAAC,UAAU,CAAC,EAAE;MACtB,OAAOC,KAAK,CAACI,MAAM,CAACiB,OAAO;IAC7B;EACF;EAEA,IAAItB,MAAM,CAAC,UAAU,CAAC,EAAE;IACtB,OAAOV,KAAK,CAACW,KAAK,CAACN,IAAI,GAAGH,KAAK,GAAGD,KAAK,CAAC,CACrCoB,KAAK,CAAC,IAAI,CAAC,CACXC,GAAG,CAAC,CAAC,CACLC,MAAM,CAAC,CAAC;EACb;EAEA,OAAO,aAAa;AACtB,CAAC;AAED,MAAMU,oBAAoB,GAAGC,KAAA,IAGM;EAAA,IAHL;IAC5BxB,MAAM;IACNC;EAC2B,CAAC,GAAAuB,KAAA;EAC5B,IAAIvB,KAAK,CAACG,IAAI,EAAE;IACd,IAAIJ,MAAM,CAAC,UAAU,CAAC,EAAE;MACtB,OAAO,CAAC;IACV;EACF;EAEA,IAAIA,MAAM,CAAC,UAAU,CAAC,EAAE;IACtB,OAAOyB,UAAU,CAACC,aAAa;EACjC;EAEA,OAAO,CAAC;AACV,CAAC;AAED,OAAO,MAAMC,eAAe,GAAGC,KAAA,IAczB;EAAA,IAd0B;IAC9B3B,KAAK;IACL4B,IAAI;IACJ1B,iBAAiB;IACjBa,eAAe;IACfd,QAAQ;IACRP;EAQF,CAAC,GAAAiC,KAAA;EACC,MAAM5B,MAAM,GAAI8B,aAAyB,IAAK;IAC5C,OAAOD,IAAI,KAAKC,aAAa;EAC/B,CAAC;EAED,MAAMlC,eAAe,GAAGE,wBAAwB,CAAC;IAC/CE,MAAM;IACNC,KAAK;IACLC,QAAQ;IACRC;EACF,CAAC,CAAC;EAEF,MAAM4B,SAAS,GAAGjB,kBAAkB,CAAC;IACnCd,MAAM;IACNC,KAAK;IACLC,QAAQ;IACRc,eAAe;IACfpB,eAAe;IACfD;EACF,CAAC,CAAC;EAEF,MAAMqC,WAAW,GAAGZ,oBAAoB,CAAC;IAAEpB,MAAM;IAAEC,KAAK;IAAEC;EAAS,CAAC,CAAC;EAErE,MAAM+B,WAAW,GAAGV,oBAAoB,CAAC;IAAEvB,MAAM;IAAEC;EAAM,CAAC,CAAC;EAE3D,OAAO;IACLL,eAAe;IACfoC,WAAW;IACXD,SAAS;IACTE;EACF,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}