{"ast":null,"code":"import { useState } from \"react\";\nimport axiosInstance from \"../api/axiosInstance\";\nimport Toast from \"react-native-toast-message\";\nconst useConversation = () => {\n  const [conversations, setConversations] = useState([]);\n  const [conversation, setConversation] = useState({});\n  const getConversations = async () => {\n    try {\n      const response = await axiosInstance.get(\"/conversations/getConversations\");\n      if (response.status === 200) {\n        const newConversationList = response.data.map(conversation => {\n          return {\n            _id: conversation._id,\n            participants: conversation.participants,\n            messages: conversation.messages,\n            lastMessage: conversation.lastMessage,\n            tag: conversation.tag\n          };\n        });\n        setConversations(newConversationList);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const getConversationsByParticipants = async participant => {\n    try {\n      const participants = [];\n      participants.push(participant);\n      const response = await axiosInstance.post(\"/conversations/getByParticipants\", {\n        participants\n      });\n      if (response.status === 200) {\n        return response.data;\n      }\n    } catch (error) {\n      return null;\n    }\n  };\n  const deleteConversation = async conversationId => {\n    try {\n      const response = await axiosInstance.post(`conversations/deleted/${conversationId}`);\n      if (response.status === 200) {\n        Toast.success(\"Conversation deleted successfully\");\n        getConversations();\n      }\n    } catch (error) {\n      console.log(error);\n      Toast.error(\"Failed to delete conversation\");\n    }\n  };\n  const getConversationByID = async conversationId => {\n    try {\n      const response = await axiosInstance.get(`conversations/get/${conversationId}`);\n      if (response.status === 200) {\n        setConversation(response.data);\n        return response.data;\n      }\n    } catch (error) {\n      console.log(error);\n      return null;\n    }\n  };\n  const handleFriendMessage = async friend => {\n    let conversation;\n    conversation = await getConversationsByParticipants(friend.userId);\n    if (conversation === null) {\n      const conversationNew = {\n        _id: friend.userId,\n        conversation: null,\n        name: friend?.profile.name,\n        avatar: friend?.profile.avatar?.url,\n        background: friend?.profile.background?.url,\n        tag: 'friend'\n      };\n      return conversationNew;\n    } else {\n      const conversationNew = {\n        _id: friend.userId,\n        conversation: conversation,\n        name: friend?.profile.name,\n        avatar: friend?.profile.avatar?.url,\n        background: friend?.profile.background?.url,\n        lastMessage: conversation.lastMessage,\n        tag: conversation.tag\n      };\n      return conversationNew;\n    }\n  };\n  return {\n    conversations,\n    conversation,\n    getConversations,\n    deleteConversation,\n    getConversationByID,\n    getConversationsByParticipants,\n    handleFriendMessage\n  };\n};\nexport default useConversation;","map":{"version":3,"names":["useState","axiosInstance","Toast","useConversation","conversations","setConversations","conversation","setConversation","getConversations","response","get","status","newConversationList","data","map","_id","participants","messages","lastMessage","tag","error","console","log","getConversationsByParticipants","participant","push","post","deleteConversation","conversationId","success","getConversationByID","handleFriendMessage","friend","userId","conversationNew","name","profile","avatar","url","background"],"sources":["D:/HK2_Nam4/CNM/BTL/New_3/AppZalo_CNM/Frontend/Mobile/zalofake/src/hooks/useConversation.js"],"sourcesContent":["import { useState } from \"react\";\r\n\r\nimport axiosInstance from \"../api/axiosInstance\";\r\nimport Toast from \"react-native-toast-message\";\r\n\r\nconst useConversation = () => {\r\n  const [conversations, setConversations] = useState([]);\r\n  const [conversation, setConversation] = useState({});\r\n\r\n  const getConversations = async () => {\r\n    try {\r\n      const response = await axiosInstance.get(\r\n        \"/conversations/getConversations\"\r\n      );\r\n      if (response.status === 200) {\r\n        const newConversationList = response.data.map((conversation) => {\r\n          return {\r\n            _id: conversation._id,\r\n            participants: conversation.participants,\r\n            messages: conversation.messages,\r\n            lastMessage: conversation.lastMessage,\r\n            tag: conversation.tag,\r\n          };\r\n        });\r\n        setConversations(newConversationList);\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      // toast.error(\"Failed to get conversations\");\r\n    }\r\n  };\r\n\r\n  const getConversationsByParticipants = async (participant) => {\r\n    try {\r\n      const participants = []\r\n      participants.push(participant)\r\n      const response = await axiosInstance.post(\r\n        \"/conversations/getByParticipants\", { participants }\r\n      );\r\n      if (response.status === 200) {\r\n        return response.data;\r\n      }\r\n    } catch (error) {\r\n      return null;\r\n    }\r\n  };\r\n  const deleteConversation = async (conversationId) => {\r\n    try {\r\n      const response = await axiosInstance.post(\r\n        `conversations/deleted/${conversationId}`\r\n      );\r\n      if (response.status === 200) {\r\n        Toast.success(\"Conversation deleted successfully\");\r\n        getConversations();\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      Toast.error(\"Failed to delete conversation\");\r\n    }\r\n  };\r\n\r\n  const getConversationByID = async (conversationId) => {\r\n    try {\r\n      const response = await axiosInstance.get(\r\n        `conversations/get/${conversationId}`\r\n      );\r\n      if (response.status === 200) {\r\n        setConversation(response.data);\r\n        return response.data;\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      return null;\r\n    }\r\n  };\r\n  const handleFriendMessage = async (friend) => {\r\n    let conversation;\r\n\r\n    conversation = await getConversationsByParticipants(friend.userId);\r\n    if (conversation === null) {\r\n      const conversationNew = {\r\n        _id: friend.userId,\r\n        conversation: null,\r\n        name: friend?.profile.name,\r\n        avatar: friend?.profile.avatar?.url,\r\n        background: friend?.profile.background?.url,\r\n        tag: 'friend',\r\n      };\r\n      return conversationNew;\r\n    }\r\n    else {\r\n      const conversationNew = {\r\n        _id: friend.userId,\r\n        conversation: conversation,\r\n        name: friend?.profile.name,\r\n        avatar: friend?.profile.avatar?.url,\r\n        background: friend?.profile.background?.url,\r\n        lastMessage: conversation.lastMessage,\r\n        tag: conversation.tag,\r\n      };\r\n      return conversationNew;\r\n    }\r\n  };\r\n\r\n  return {\r\n    conversations,\r\n    conversation,\r\n    getConversations,\r\n    deleteConversation,\r\n    getConversationByID,\r\n    getConversationsByParticipants,\r\n    handleFriendMessage\r\n  };\r\n};\r\n\r\nexport default useConversation;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}