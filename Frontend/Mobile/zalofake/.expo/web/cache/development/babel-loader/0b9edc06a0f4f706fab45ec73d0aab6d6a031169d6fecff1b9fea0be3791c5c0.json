{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState } from \"react\";\nimport { useAuthContext } from \"../contexts/AuthContext\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport Toast from \"react-native-toast-message\";\nimport * as Device from \"expo-device\";\nimport axiosInstance from \"../components/configs/axiosInstance\";\nvar useLogin = function useLogin() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    loading = _useState2[0],\n    setLoading = _useState2[1];\n  var _useAuthContext = useAuthContext(),\n    setAuthUser = _useAuthContext.setAuthUser,\n    setAccessToken = _useAuthContext.setAccessToken,\n    setRefreshToken = _useAuthContext.setRefreshToken;\n  var login = function () {\n    var _ref = _asyncToGenerator(function* (phone, password) {\n      setLoading(true);\n      try {\n        var device_id = Device.osBuildId;\n        var response = yield axiosInstance.post(\"/auth/login\", {\n          phone: phone,\n          password: password,\n          device_id: device_id\n        });\n        var data = response.data;\n        if (response.status === 200) {\n          setAuthUser(data.user);\n          setAccessToken(data.accessToken);\n          setRefreshToken(data.refreshToken);\n        } else {\n          Toast.show({\n            type: \"error\",\n            text1: \"Error\",\n            text2: `${data.error}`,\n            visibilityTime: 3000\n          });\n        }\n      } catch (error) {\n        console.error(\"Error during login:\", error);\n      }\n      setLoading(false);\n    });\n    return function login(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  return {\n    login: login,\n    loading: loading\n  };\n};\nvar showMesg = function showMesg(mesg, type) {\n  Toast.show({\n    type: `${type}`,\n    text1: `${mesg}`,\n    text2: `${mesg}`\n  });\n};\nexport default useLogin;","map":{"version":3,"names":["useState","useAuthContext","AsyncStorage","Toast","Device","axiosInstance","useLogin","_useState","_useState2","_slicedToArray","loading","setLoading","_useAuthContext","setAuthUser","setAccessToken","setRefreshToken","login","_ref","_asyncToGenerator","phone","password","device_id","osBuildId","response","post","data","status","user","accessToken","refreshToken","show","type","text1","text2","error","visibilityTime","console","_x","_x2","apply","arguments","showMesg","mesg"],"sources":["D:/HK2_Nam4/CNM/BTL/New 2/AppZalo_CNM/Frontend/Mobile/zalofake/src/hooks/useLogin.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport { useAuthContext } from \"../contexts/AuthContext\";\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport Toast from \"react-native-toast-message\";\r\nimport * as Device from \"expo-device\";\r\n\r\nimport axiosInstance from \"../components/configs/axiosInstance\";\r\n\r\nconst useLogin = () => {\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const { setAuthUser, setAccessToken, setRefreshToken } = useAuthContext();\r\n\r\n  const login = async (phone, password) => {\r\n    setLoading(true);\r\n    try {\r\n      const device_id = Device.osBuildId;\r\n      const response = await axiosInstance.post(\"/auth/login\", {\r\n        phone,\r\n        password,\r\n        device_id,\r\n      });\r\n\r\n      const data = response.data;\r\n      if (response.status === 200) {\r\n        setAuthUser(data.user);\r\n        setAccessToken(data.accessToken);\r\n        setRefreshToken(data.refreshToken);\r\n      } else {\r\n        Toast.show({\r\n          type: \"error\",\r\n          text1: \"Error\",\r\n          text2: `${data.error}`,\r\n          visibilityTime: 3000, // 3 giÃ¢y\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error during login:\", error);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  return { login, loading };\r\n};\r\n\r\nconst showMesg = (mesg, type) => {\r\n  Toast.show({\r\n    type: `${type}`,\r\n    text1: `${mesg}`,\r\n    text2: `${mesg}`,\r\n  });\r\n};\r\n\r\nexport default useLogin;\r\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,cAAc;AACvB,OAAOC,YAAY,MAAM,2CAA2C;AACpE,OAAOC,KAAK,MAAM,4BAA4B;AAC9C,OAAO,KAAKC,MAAM,MAAM,aAAa;AAErC,OAAOC,aAAa;AAEpB,IAAMC,QAAQ,GAAG,SAAXA,QAAQA,CAAA,EAAS;EACrB,IAAAC,SAAA,GAA8BP,QAAQ,CAAC,KAAK,CAAC;IAAAQ,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAtCG,OAAO,GAAAF,UAAA;IAAEG,UAAU,GAAAH,UAAA;EAE1B,IAAAI,eAAA,GAAyDX,cAAc,CAAC,CAAC;IAAjEY,WAAW,GAAAD,eAAA,CAAXC,WAAW;IAAEC,cAAc,GAAAF,eAAA,CAAdE,cAAc;IAAEC,eAAe,GAAAH,eAAA,CAAfG,eAAe;EAEpD,IAAMC,KAAK;IAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,WAAOC,KAAK,EAAEC,QAAQ,EAAK;MACvCT,UAAU,CAAC,IAAI,CAAC;MAChB,IAAI;QACF,IAAMU,SAAS,GAAGjB,MAAM,CAACkB,SAAS;QAClC,IAAMC,QAAQ,SAASlB,aAAa,CAACmB,IAAI,CAAC,aAAa,EAAE;UACvDL,KAAK,EAALA,KAAK;UACLC,QAAQ,EAARA,QAAQ;UACRC,SAAS,EAATA;QACF,CAAC,CAAC;QAEF,IAAMI,IAAI,GAAGF,QAAQ,CAACE,IAAI;QAC1B,IAAIF,QAAQ,CAACG,MAAM,KAAK,GAAG,EAAE;UAC3Bb,WAAW,CAACY,IAAI,CAACE,IAAI,CAAC;UACtBb,cAAc,CAACW,IAAI,CAACG,WAAW,CAAC;UAChCb,eAAe,CAACU,IAAI,CAACI,YAAY,CAAC;QACpC,CAAC,MAAM;UACL1B,KAAK,CAAC2B,IAAI,CAAC;YACTC,IAAI,EAAE,OAAO;YACbC,KAAK,EAAE,OAAO;YACdC,KAAK,EAAG,GAAER,IAAI,CAACS,KAAM,EAAC;YACtBC,cAAc,EAAE;UAClB,CAAC,CAAC;QACJ;MACF,CAAC,CAAC,OAAOD,KAAK,EAAE;QACdE,OAAO,CAACF,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC7C;MACAvB,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC;IAAA,gBA3BKK,KAAKA,CAAAqB,EAAA,EAAAC,GAAA;MAAA,OAAArB,IAAA,CAAAsB,KAAA,OAAAC,SAAA;IAAA;EAAA,GA2BV;EAED,OAAO;IAAExB,KAAK,EAALA,KAAK;IAAEN,OAAO,EAAPA;EAAQ,CAAC;AAC3B,CAAC;AAED,IAAM+B,QAAQ,GAAG,SAAXA,QAAQA,CAAIC,IAAI,EAAEX,IAAI,EAAK;EAC/B5B,KAAK,CAAC2B,IAAI,CAAC;IACTC,IAAI,EAAG,GAAEA,IAAK,EAAC;IACfC,KAAK,EAAG,GAAEU,IAAK,EAAC;IAChBT,KAAK,EAAG,GAAES,IAAK;EACjB,CAAC,CAAC;AACJ,CAAC;AAED,eAAepC,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}