{"ast":null,"code":"import { useState } from \"react\";\nimport OTPTextView from \"react-native-otp-textinput\";\nimport axiosInstance from \"../api/axiosInstance\";\nconst useRegister = () => {\n  const [systemOTP, setSystemOTP] = useState(null);\n  const [isOTPVerified, setIsOTPVerified] = useState(false);\n  const verifyOTP = async (userOTP, systemOTP) => {\n    if (userOTP === systemOTP.otp && systemOTP.expires >= Date.now()) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n  const sendOTP = async email => {\n    const response = await axiosInstance.post(\"/auth/send-otp\", {\n      email\n    });\n    const data = response.data;\n    return data.totp;\n  };\n  const getOTP = async email => {\n    const checkEmai = await check_mail(email);\n    if (checkEmai) {\n      showToastError(\"Email already exists\");\n      return false;\n    } else {\n      try {\n        setIsOTPVerified(false);\n        const otp = await sendOTP(email);\n        if (otp) {\n          showToastSuccess(\"OTP sent to your email\");\n          setSystemOTP(otp);\n          return true;\n        } else {\n          showToastError(\"Failed to send OTP\");\n          return false;\n        }\n      } catch (error) {\n        console.log(error);\n        showToastError(\"Failed to send OTP\");\n        return false;\n      }\n    }\n  };\n  const verifyEmailAndRegister = async (textEmail, otp, textPhone, name, dob, selectedGender, textPW) => {\n    const verified = await verifyOTP(otp, systemOTP);\n    setIsOTPVerified(verified);\n    try {\n      if (verified) {\n        const response = await axiosInstance.post(\"/auth/register\", {\n          phone: textPhone,\n          email: textEmail,\n          password: textPW,\n          name: name,\n          dob: dob,\n          gender: selectedGender.toString(),\n          userOTP: otp\n        });\n        setIsOTPVerified(true);\n        const data = response.data;\n        console.log(data);\n        if (response.status === 201) {\n          showToastSuccess(\"Account created successfully\");\n          return true;\n        } else {\n          showToastError(data.response.message);\n          return false;\n        }\n      } else {\n        showToastError(\"Invalid OTP\");\n        return false;\n      }\n    } catch (error) {\n      console.log(error);\n      setIsOTPVerified(true);\n      showToastError(error.response.data.message);\n      return false;\n    }\n  };\n  const check_mail = async email => {\n    try {\n      const response = await axiosInstance.post(\"/users/check-email\", {\n        email\n      });\n      if (response.status === 404) {\n        return false;\n      } else if (response.status === 200) {\n        return true;\n      } else {\n        return false;\n      }\n    } catch (error) {\n      return false;\n    }\n  };\n  const GetSystemOTP = () => {\n    return systemOTP;\n  };\n  const checkMail = async email => {\n    const checkEmai = await check_mail(email);\n    if (checkEmai) {\n      showToastError(\"Email already exists\");\n      return false;\n    } else {\n      return true;\n    }\n  };\n  return {\n    isOTPVerified,\n    getOTP,\n    verifyEmailAndRegister,\n    verifyOTP,\n    GetSystemOTP,\n    checkMail\n  };\n};\nexport default useRegister;","map":{"version":3,"names":["useState","OTPTextView","axiosInstance","useRegister","systemOTP","setSystemOTP","isOTPVerified","setIsOTPVerified","verifyOTP","userOTP","otp","expires","Date","now","sendOTP","email","response","post","data","totp","getOTP","checkEmai","check_mail","showToastError","showToastSuccess","error","console","log","verifyEmailAndRegister","textEmail","textPhone","name","dob","selectedGender","textPW","verified","phone","password","gender","toString","status","message","GetSystemOTP","checkMail"],"sources":["D:/HK2_Nam4/CNM/BTL/New_3/AppZalo_CNM/Frontend/Mobile/zalofake/src/hooks/useRegister.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport OTPTextView from \"react-native-otp-textinput\";\r\nimport axiosInstance from \"../api/axiosInstance\";\r\n\r\nconst useRegister = () => {\r\n  const [systemOTP, setSystemOTP] = useState(null);\r\n  const [isOTPVerified, setIsOTPVerified] = useState(false);\r\n\r\n  const verifyOTP = async (userOTP, systemOTP) => {\r\n    if (userOTP === systemOTP.otp && systemOTP.expires >= Date.now()) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const sendOTP = async (email) => {\r\n    const response = await axiosInstance.post(\"/auth/send-otp\", {\r\n      email,\r\n    });\r\n    const data = response.data;\r\n    return data.totp;\r\n  };\r\n\r\n  const getOTP = async (email) => {\r\n    const checkEmai = await check_mail(email);\r\n    if (checkEmai) {\r\n      showToastError(\"Email already exists\");\r\n      return false;\r\n    } else {\r\n      try {\r\n        setIsOTPVerified(false);\r\n        const otp = await sendOTP(email);\r\n        if (otp) {\r\n          showToastSuccess(\"OTP sent to your email\");\r\n          setSystemOTP(otp);\r\n          return true;\r\n        } else {\r\n          showToastError(\"Failed to send OTP\");\r\n          return false;\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n        showToastError(\"Failed to send OTP\");\r\n        return false;\r\n      }\r\n    }\r\n  };\r\n\r\n  const verifyEmailAndRegister = async (\r\n    textEmail,\r\n    otp,\r\n    textPhone,\r\n    name,\r\n    dob,\r\n    selectedGender,\r\n    textPW\r\n  ) => {\r\n    const verified = await verifyOTP(otp, systemOTP);\r\n    setIsOTPVerified(verified);\r\n    try {\r\n      if (verified) {\r\n        const response = await axiosInstance.post(\"/auth/register\", {\r\n          phone: textPhone,\r\n          email: textEmail,\r\n          password: textPW,\r\n          name: name,\r\n          dob: dob,\r\n          gender: selectedGender.toString(),\r\n          userOTP: otp,\r\n        });\r\n        setIsOTPVerified(true);\r\n        const data = response.data;\r\n        console.log(data);\r\n\r\n        if (response.status === 201) {\r\n          showToastSuccess(\"Account created successfully\");\r\n          return true;\r\n        } else {\r\n          showToastError(data.response.message);\r\n          return false;\r\n        }\r\n      } else {\r\n        showToastError(\"Invalid OTP\");\r\n        return false;\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      setIsOTPVerified(true);\r\n      showToastError(error.response.data.message);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const check_mail = async (email) => {\r\n    try {\r\n      const response = await axiosInstance.post(\"/users/check-email\", {\r\n        email,\r\n      });\r\n      if (response.status === 404) {\r\n        return false;\r\n      } else if (response.status === 200) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  };\r\n  const GetSystemOTP = () => {\r\n    return systemOTP;\r\n  };\r\n\r\n  const checkMail = async (email) => {\r\n    const checkEmai = await check_mail(email);\r\n    if (checkEmai) {\r\n      showToastError(\"Email already exists\");\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  };\r\n\r\n  return {\r\n    isOTPVerified,\r\n    getOTP,\r\n    verifyEmailAndRegister,\r\n    verifyOTP,\r\n    GetSystemOTP,\r\n    checkMail\r\n  };\r\n};\r\n\r\nexport default useRegister;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}