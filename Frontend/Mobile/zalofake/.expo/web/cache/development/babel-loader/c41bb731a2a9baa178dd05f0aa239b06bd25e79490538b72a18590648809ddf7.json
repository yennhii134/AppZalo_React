{"ast":null,"code":"import React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { AdornmentSide } from './enums';\nimport { getTextColor } from './utils';\nimport { useInternalTheme } from '../../../core/theming';\nimport { getConstants } from '../helpers';\nconst AffixContext = React.createContext({\n  textStyle: {\n    fontFamily: '',\n    color: ''\n  },\n  topPosition: null,\n  side: AdornmentSide.Left\n});\nconst AffixAdornment = _ref => {\n  let {\n    affix,\n    side,\n    textStyle,\n    topPosition,\n    onLayout,\n    visible,\n    paddingHorizontal,\n    maxFontSizeMultiplier,\n    testID,\n    disabled\n  } = _ref;\n  return React.createElement(AffixContext.Provider, {\n    value: {\n      side,\n      textStyle,\n      topPosition,\n      onLayout,\n      visible,\n      paddingHorizontal,\n      maxFontSizeMultiplier,\n      testID,\n      disabled\n    }\n  }, affix);\n};\nconst TextInputAffix = _ref2 => {\n  let {\n    text,\n    textStyle: labelStyle,\n    theme: themeOverrides,\n    onLayout: onTextLayout,\n    onPress,\n    accessibilityLabel = text\n  } = _ref2;\n  const theme = useInternalTheme(themeOverrides);\n  const {\n    AFFIX_OFFSET\n  } = getConstants(theme.isV3);\n  const {\n    textStyle,\n    onLayout,\n    topPosition,\n    side,\n    visible,\n    paddingHorizontal,\n    maxFontSizeMultiplier,\n    testID,\n    disabled\n  } = React.useContext(AffixContext);\n  const offset = typeof paddingHorizontal === 'number' ? paddingHorizontal : AFFIX_OFFSET;\n  const style = {\n    top: topPosition,\n    [side]: offset\n  };\n  const textColor = getTextColor({\n    theme,\n    disabled\n  });\n  const affix = React.createElement(Animated.View, {\n    style: [styles.container, style, {\n      opacity: (visible === null || visible === void 0 ? void 0 : visible.interpolate({\n        inputRange: [0, 1],\n        outputRange: [1, 0]\n      })) || 1\n    }],\n    onLayout: onLayout,\n    testID: testID\n  }, React.createElement(Text, {\n    maxFontSizeMultiplier: maxFontSizeMultiplier,\n    style: [{\n      color: textColor\n    }, textStyle, labelStyle],\n    onLayout: onTextLayout,\n    testID: `${testID}-text`\n  }, text));\n  if (onPress) {\n    return React.createElement(Pressable, {\n      onPress: onPress,\n      accessibilityRole: \"button\",\n      accessibilityLabel: accessibilityLabel,\n      style: styles.container\n    }, affix);\n  }\n  return affix;\n};\nTextInputAffix.displayName = 'TextInput.Affix';\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\nexport default TextInputAffix;\nexport { TextInputAffix, AffixAdornment };","map":{"version":3,"names":["React","Animated","Pressable","StyleSheet","Text","AdornmentSide","getTextColor","useInternalTheme","getConstants","AffixContext","createContext","textStyle","fontFamily","color","topPosition","side","Left","AffixAdornment","_ref","affix","onLayout","visible","paddingHorizontal","maxFontSizeMultiplier","testID","disabled","createElement","Provider","value","TextInputAffix","_ref2","text","labelStyle","theme","themeOverrides","onTextLayout","onPress","accessibilityLabel","AFFIX_OFFSET","isV3","useContext","offset","style","top","textColor","View","styles","container","opacity","interpolate","inputRange","outputRange","accessibilityRole","displayName","create","position","justifyContent","alignItems"],"sources":["D:\\HK2_Nam4\\CNM\\BTL\\New_3\\AppZalo_CNM\\Frontend\\Mobile\\zalofake\\node_modules\\react-native-paper\\src\\components\\TextInput\\Adornment\\TextInputAffix.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  Animated,\n  GestureResponderEvent,\n  LayoutChangeEvent,\n  Pressable,\n  StyleProp,\n  StyleSheet,\n  Text,\n  TextStyle,\n  ViewStyle,\n} from 'react-native';\n\nimport { AdornmentSide } from './enums';\nimport { getTextColor } from './utils';\nimport { useInternalTheme } from '../../../core/theming';\nimport type { ThemeProp } from '../../../types';\nimport { getConstants } from '../helpers';\n\nexport type Props = {\n  /**\n   * Text to show.\n   */\n  text: string;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Accessibility label for the affix. This is read by the screen reader when the user taps the affix.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Style that is passed to the Text element.\n   */\n  textStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n};\n\ntype ContextState = {\n  topPosition: number | null;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  visible?: Animated.Value;\n  textStyle?: StyleProp<TextStyle>;\n  side: AdornmentSide;\n  paddingHorizontal?: number | string;\n  maxFontSizeMultiplier?: number | undefined | null;\n  testID?: string;\n  disabled?: boolean;\n};\n\nconst AffixContext = React.createContext<ContextState>({\n  textStyle: { fontFamily: '', color: '' },\n  topPosition: null,\n  side: AdornmentSide.Left,\n});\n\nconst AffixAdornment: React.FunctionComponent<\n  {\n    affix: React.ReactNode;\n    testID: string;\n  } & ContextState\n> = ({\n  affix,\n  side,\n  textStyle,\n  topPosition,\n  onLayout,\n  visible,\n  paddingHorizontal,\n  maxFontSizeMultiplier,\n  testID,\n  disabled,\n}) => {\n  return (\n    <AffixContext.Provider\n      value={{\n        side,\n        textStyle,\n        topPosition,\n        onLayout,\n        visible,\n        paddingHorizontal,\n        maxFontSizeMultiplier,\n        testID,\n        disabled,\n      }}\n    >\n      {affix}\n    </AffixContext.Provider>\n  );\n};\n\n/**\n * A component to render a leading / trailing text in the TextInput\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *   return (\n *     <TextInput\n *       mode=\"outlined\"\n *       label=\"Outlined input\"\n *       placeholder=\"Type something\"\n *       right={<TextInput.Affix text=\"/100\" />}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nconst TextInputAffix = ({\n  text,\n  textStyle: labelStyle,\n  theme: themeOverrides,\n  onLayout: onTextLayout,\n  onPress,\n  accessibilityLabel = text,\n}: Props) => {\n  const theme = useInternalTheme(themeOverrides);\n  const { AFFIX_OFFSET } = getConstants(theme.isV3);\n\n  const {\n    textStyle,\n    onLayout,\n    topPosition,\n    side,\n    visible,\n    paddingHorizontal,\n    maxFontSizeMultiplier,\n    testID,\n    disabled,\n  } = React.useContext(AffixContext);\n\n  const offset =\n    typeof paddingHorizontal === 'number' ? paddingHorizontal : AFFIX_OFFSET;\n\n  const style = {\n    top: topPosition,\n    [side]: offset,\n  } as ViewStyle;\n\n  const textColor = getTextColor({ theme, disabled });\n\n  const affix = (\n    <Animated.View\n      style={[\n        styles.container,\n        style,\n        {\n          opacity:\n            visible?.interpolate({\n              inputRange: [0, 1],\n              outputRange: [1, 0],\n            }) || 1,\n        },\n      ]}\n      onLayout={onLayout}\n      testID={testID}\n    >\n      <Text\n        maxFontSizeMultiplier={maxFontSizeMultiplier}\n        style={[{ color: textColor }, textStyle, labelStyle]}\n        onLayout={onTextLayout}\n        testID={`${testID}-text`}\n      >\n        {text}\n      </Text>\n    </Animated.View>\n  );\n\n  if (onPress) {\n    return (\n      <Pressable\n        onPress={onPress}\n        accessibilityRole=\"button\"\n        accessibilityLabel={accessibilityLabel}\n        style={styles.container}\n      >\n        {affix}\n      </Pressable>\n    );\n  }\n  return affix;\n};\n\nTextInputAffix.displayName = 'TextInput.Affix';\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default TextInputAffix;\n\n// @component-docs ignore-next-line\nexport { TextInputAffix, AffixAdornment };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}