{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nconst _excluded = [\"size\", \"color\", \"icon\", \"disabled\", \"onPress\", \"accessibilityLabel\", \"isLeading\", \"theme\", \"rippleColor\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport color from 'color';\nimport { useInternalTheme } from '../../core/theming';\nimport { black } from '../../styles/themes/v2/colors';\nimport { forwardRef } from '../../utils/forwardRef';\nimport IconButton from '../IconButton/IconButton';\nconst AppbarAction = forwardRef((_ref, ref) => {\n  let {\n      size = 24,\n      color: iconColor,\n      icon,\n      disabled,\n      onPress,\n      accessibilityLabel,\n      isLeading,\n      theme: themeOverrides,\n      rippleColor\n    } = _ref,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  const theme = useInternalTheme(themeOverrides);\n  const actionIconColor = iconColor ? iconColor : theme.isV3 ? isLeading ? theme.colors.onSurface : theme.colors.onSurfaceVariant : color(black).alpha(0.54).rgb().string();\n  return React.createElement(IconButton, _extends({\n    size: size,\n    onPress: onPress,\n    iconColor: actionIconColor,\n    icon: icon,\n    disabled: disabled,\n    accessibilityLabel: accessibilityLabel,\n    animated: true,\n    ref: ref,\n    rippleColor: rippleColor\n  }, rest));\n});\nAppbarAction.displayName = 'Appbar.Action';\nexport default AppbarAction;\nexport { AppbarAction };","map":{"version":3,"names":["React","color","useInternalTheme","black","forwardRef","IconButton","AppbarAction","_ref","ref","size","iconColor","icon","disabled","onPress","accessibilityLabel","isLeading","theme","themeOverrides","rippleColor","rest","_objectWithoutProperties","_excluded","actionIconColor","isV3","colors","onSurface","onSurfaceVariant","alpha","rgb","string","createElement","_extends","animated","displayName"],"sources":["D:\\HK2_Nam4\\CNM\\BTL\\New_3\\AppZalo_CNM\\Frontend\\Mobile\\zalofake\\node_modules\\react-native-paper\\src\\components\\Appbar\\AppbarAction.tsx"],"sourcesContent":["import * as React from 'react';\nimport type {\n  StyleProp,\n  ViewStyle,\n  View,\n  Animated,\n  ColorValue,\n} from 'react-native';\n\nimport color from 'color';\nimport type { ThemeProp } from 'src/types';\n\nimport { useInternalTheme } from '../../core/theming';\nimport { black } from '../../styles/themes/v2/colors';\nimport { forwardRef } from '../../utils/forwardRef';\nimport type { IconSource } from '../Icon';\nimport IconButton from '../IconButton/IconButton';\n\nexport type Props = React.ComponentPropsWithoutRef<typeof IconButton> & {\n  /**\n   *  Custom color for action icon.\n   */\n  color?: string;\n  /**\n   * Color of the ripple effect.\n   */\n  rippleColor?: ColorValue;\n  /**\n   * Name of the icon to show.\n   */\n  icon: IconSource;\n  /**\n   * Optional icon size.\n   */\n  size?: number;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *\n   * Whether it's the leading button.\n   */\n  isLeading?: boolean;\n  style?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  ref?: React.RefObject<View>;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n};\n\n/**\n * A component used to display an action item in the appbar.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Appbar } from 'react-native-paper';\n * import { Platform } from 'react-native';\n *\n * const MORE_ICON = Platform.OS === 'ios' ? 'dots-horizontal' : 'dots-vertical';\n *\n * const MyComponent = () => (\n *     <Appbar.Header>\n *        <Appbar.Content title=\"Title\" subtitle={'Subtitle'} />\n *         <Appbar.Action icon=\"magnify\" onPress={() => {}} />\n *         <Appbar.Action icon={MORE_ICON} onPress={() => {}} />\n *     </Appbar.Header>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst AppbarAction = forwardRef<View, Props>(\n  (\n    {\n      size = 24,\n      color: iconColor,\n      icon,\n      disabled,\n      onPress,\n      accessibilityLabel,\n      isLeading,\n      theme: themeOverrides,\n      rippleColor,\n      ...rest\n    }: Props,\n    ref\n  ) => {\n    const theme = useInternalTheme(themeOverrides);\n\n    const actionIconColor = iconColor\n      ? iconColor\n      : theme.isV3\n      ? isLeading\n        ? theme.colors.onSurface\n        : theme.colors.onSurfaceVariant\n      : color(black).alpha(0.54).rgb().string();\n\n    return (\n      <IconButton\n        size={size}\n        onPress={onPress}\n        iconColor={actionIconColor}\n        icon={icon}\n        disabled={disabled}\n        accessibilityLabel={accessibilityLabel}\n        animated\n        ref={ref}\n        rippleColor={rippleColor}\n        {...rest}\n      />\n    );\n  }\n);\n\nAppbarAction.displayName = 'Appbar.Action';\n\nexport default AppbarAction;\n\n// @component-docs ignore-next-line\nexport { AppbarAction };\n"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAS9B,OAAOC,KAAK,MAAM,OAAO;AAGzB,SAASC,gBAAgB,QAAQ,oBAAoB;AACrD,SAASC,KAAK,QAAQ,+BAA+B;AACrD,SAASC,UAAU,QAAQ,wBAAwB;AAEnD,OAAOC,UAAU,MAAM,0BAA0B;AAmEjD,MAAMC,YAAY,GAAGF,UAAU,CAC7B,CAAAG,IAAA,EAaEC,GAAG,KACA;EAAA,IAbH;MACEC,IAAI,GAAG,EAAE;MACTR,KAAK,EAAES,SAAS;MAChBC,IAAI;MACJC,QAAQ;MACRC,OAAO;MACPC,kBAAkB;MAClBC,SAAS;MACTC,KAAK,EAAEC,cAAc;MACrBC;IAEK,CAAC,GAAAX,IAAA;IADHY,IAAA,GAAAC,wBAAA,CACGb,IAAA,EAAAc,SAAA;EAGR,MAAML,KAAK,GAAGd,gBAAgB,CAACe,cAAc,CAAC;EAE9C,MAAMK,eAAe,GAAGZ,SAAS,GAC7BA,SAAS,GACTM,KAAK,CAACO,IAAI,GACVR,SAAS,GACPC,KAAK,CAACQ,MAAM,CAACC,SAAS,GACtBT,KAAK,CAACQ,MAAM,CAACE,gBAAgB,GAC/BzB,KAAK,CAACE,KAAK,CAAC,CAACwB,KAAK,CAAC,IAAI,CAAC,CAACC,GAAG,CAAC,CAAC,CAACC,MAAM,CAAC,CAAC;EAE3C,OACE7B,KAAA,CAAA8B,aAAA,CAACzB,UAAU,EAAA0B,QAAA;IACTtB,IAAI,EAAEA,IAAK;IACXI,OAAO,EAAEA,OAAQ;IACjBH,SAAS,EAAEY,eAAgB;IAC3BX,IAAI,EAAEA,IAAK;IACXC,QAAQ,EAAEA,QAAS;IACnBE,kBAAkB,EAAEA,kBAAmB;IACvCkB,QAAQ;IACRxB,GAAG,EAAEA,GAAI;IACTU,WAAW,EAAEA;EAAY,GACrBC,IAAI,CACT,CAAC;AAEN,CACF,CAAC;AAEDb,YAAY,CAAC2B,WAAW,GAAG,eAAe;AAE1C,eAAe3B,YAAY;AAG3B,SAASA,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}