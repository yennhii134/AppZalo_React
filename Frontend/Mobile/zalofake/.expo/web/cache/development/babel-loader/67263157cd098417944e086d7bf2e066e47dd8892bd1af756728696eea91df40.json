{"ast":null,"code":"import axios from 'axios';\nimport config from \"./config\";\nvar isRefreshing = false;\nvar refreshSubscribers = [];\nvar axiosInstance = axios.create({\n  baseURL: config.baseURL,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nexport default axiosInstance;","map":{"version":3,"names":["axios","config","isRefreshing","refreshSubscribers","axiosInstance","create","baseURL","timeout","headers"],"sources":["C:/BaoTruc/iuh/ky2nam4/CNM/DeTai/AppZalo_CNM/Frontend/Mobile/zalofake/src/components/configs/axiosInstance.js"],"sourcesContent":["import axios from 'axios';\r\nimport config from './config';\r\n// import AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\nlet isRefreshing = false;\r\nlet refreshSubscribers = [];\r\n\r\nconst axiosInstance = axios.create({\r\n  baseURL: config.baseURL,\r\n  timeout: 30000 ,\r\n  headers: {\r\n      'Content-Type': 'application/json',\r\n  }\r\n});\r\n\r\n// // Hàm để thêm các subscriber vào mảng\r\n// function subscribeTokenRefresh(callback) {\r\n//     refreshSubscribers.push(callback);\r\n// }\r\n\r\n// // Hàm để gửi yêu cầu làm mới token\r\n// function onRefreshed(token) {\r\n//     refreshSubscribers.map((callback) => callback(token));\r\n// }\r\n\r\n\r\n// // Hàm để lấy access token từ AsyncStorage\r\n// async function getRefreshToken() {\r\n//     try {\r\n//         const refreshToken = await AsyncStorage.getItem('refreshToken');\r\n//         return refreshToken;\r\n//     } catch (error) {\r\n//         console.error('Error getting refreshToken from AsyncStorage:', error);\r\n//         return null;\r\n//     }\r\n// }\r\n// const refreshToken = await getRefreshToken();\r\n\r\n\r\n// axiosInstance.interceptors.response.use(\r\n//     (response) => {\r\n//         return response;\r\n//     },\r\n//     async (error) => {\r\n//         const originalRequest = error.config;\r\n//         // Nếu lỗi là mã lỗi 401 (Unauthorized) và không phải là quá trình làm mới token\r\n//         if (error.response.status === 401 && !originalRequest._retry) {\r\n//             if (isRefreshing) {\r\n//                 // Nếu đang quá trình làm mới token, đợi cho đến khi token được làm mới xong và gửi lại yêu cầu ban đầu\r\n//                 await new Promise((resolve) => subscribeTokenRefresh(resolve));\r\n//                 return axiosInstance(originalRequest);\r\n//             }\r\n//             originalRequest._retry = true;\r\n//             isRefreshing = true;\r\n//             try {\r\n//                 // Gửi yêu cầu để làm mới token\r\n//                 const response = await axiosInstance.post('/auth/refreshToken', {\r\n//                     refreshToken: refreshToken,\r\n//                 });\r\n//                 // Lưu trữ token mới\r\n//                 const refreshedToken = response.data.accessToken;\r\n//                 // Cập nhật header của request ban đầu với token mới\r\n//                 originalRequest.headers.Authorization = 'Bearer ' + refreshedToken;\r\n//                 // Gửi lại yêu cầu ban đầu với token mới\r\n//                 onRefreshed(refreshedToken);\r\n//                 // Trả về response sau khi làm mới token thành công\r\n//                 return axiosInstance(originalRequest);\r\n//             } catch (error) {\r\n//                 // Xử lý lỗi khi làm mới token thất bại\r\n//                 return Promise.reject(error);\r\n//             } finally {\r\n//                 isRefreshing = false;\r\n//             }\r\n//         }\r\n//         // Trả về lỗi nếu không phải mã lỗi 401 hoặc quá trình làm mới token không thành công\r\n//         return Promise.reject(error);\r\n//     }\r\n// );\r\n\r\nexport  default  axiosInstance ;\r\n\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM;AAGb,IAAIC,YAAY,GAAG,KAAK;AACxB,IAAIC,kBAAkB,GAAG,EAAE;AAE3B,IAAMC,aAAa,GAAGJ,KAAK,CAACK,MAAM,CAAC;EACjCC,OAAO,EAAEL,MAAM,CAACK,OAAO;EACvBC,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE;IACL,cAAc,EAAE;EACpB;AACF,CAAC,CAAC;AAkEF,eAAiBJ,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}