{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nconst _excluded = [\"id\", \"initialRouteName\", \"backBehavior\", \"children\", \"screenListeners\", \"screenOptions\"],\n  _excluded2 = [\"swipeEnabled\", \"lazy\", \"lazyPlaceholder\", \"lazyPreloadDistance\", \"tabBarOptions\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { createNavigatorFactory, TabRouter, useNavigationBuilder } from '@react-navigation/native';\nimport * as React from 'react';\nimport warnOnce from 'warn-once';\nimport MaterialTopTabView from '../views/MaterialTopTabView';\nfunction MaterialTopTabNavigator(_ref) {\n  let {\n      id,\n      initialRouteName,\n      backBehavior,\n      children,\n      screenListeners,\n      screenOptions\n    } = _ref,\n    restWithDeprecated = _objectWithoutProperties(_ref, _excluded);\n  const {\n      swipeEnabled,\n      lazy,\n      lazyPlaceholder,\n      lazyPreloadDistance,\n      tabBarOptions\n    } = restWithDeprecated,\n    rest = _objectWithoutProperties(restWithDeprecated, _excluded2);\n  let defaultScreenOptions = {};\n  if (tabBarOptions) {\n    Object.assign(defaultScreenOptions, {\n      tabBarActiveTintColor: tabBarOptions.activeTintColor,\n      tabBarInactiveTintColor: tabBarOptions.inactiveTintColor,\n      tabBarPressColor: tabBarOptions.pressColor,\n      tabBarPressOpacity: tabBarOptions.pressOpacity,\n      tabBarShowLabel: tabBarOptions.showLabel,\n      tabBarShowIcon: tabBarOptions.showIcon,\n      tabBarAllowFontScaling: tabBarOptions.allowFontScaling,\n      tabBarBounces: tabBarOptions.bounces,\n      tabBarScrollEnabled: tabBarOptions.scrollEnabled,\n      tabBarIconStyle: tabBarOptions.iconStyle,\n      tabBarLabelStyle: tabBarOptions.labelStyle,\n      tabBarItemStyle: tabBarOptions.tabStyle,\n      tabBarBadge: tabBarOptions.renderBadge,\n      tabBarIndicator: tabBarOptions.renderIndicator,\n      tabBarIndicatorStyle: tabBarOptions.indicatorStyle,\n      tabBarIndicatorContainerStyle: tabBarOptions.indicatorContainerStyle,\n      tabBarContentContainerStyle: tabBarOptions.contentContainerStyle,\n      tabBarStyle: tabBarOptions.style\n    });\n    Object.keys(defaultScreenOptions).forEach(key => {\n      if (defaultScreenOptions[key] === undefined) {\n        delete defaultScreenOptions[key];\n      }\n    });\n    warnOnce(tabBarOptions, `Material Top Tab Navigator: 'tabBarOptions' is deprecated. Migrate the options to 'screenOptions' instead.\\n\\nPlace the following in 'screenOptions' in your code to keep current behavior:\\n\\n${JSON.stringify(defaultScreenOptions, null, 2)}\\n\\nSee https://reactnavigation.org/docs/material-top-tab-navigator#options for more details.`);\n  }\n  const deprecatedProps = {\n    swipeEnabled,\n    lazy,\n    lazyPlaceholder,\n    lazyPreloadDistance\n  };\n  Object.entries(deprecatedProps).forEach(_ref2 => {\n    let [propName, propValue] = _ref2;\n    if (propValue !== undefined) {\n      defaultScreenOptions[propName] = propValue;\n      warnOnce(true, `Material Top Tab Navigator: '${propName}' in props is deprecated. Move it to 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/material-top-tab-navigator#${propName.toLowerCase()} for more details.`);\n    }\n  });\n  const {\n    state,\n    descriptors,\n    navigation,\n    NavigationContent\n  } = useNavigationBuilder(TabRouter, {\n    id,\n    initialRouteName,\n    backBehavior,\n    children,\n    screenListeners,\n    screenOptions,\n    defaultScreenOptions\n  });\n  return React.createElement(NavigationContent, null, React.createElement(MaterialTopTabView, _extends({}, rest, {\n    state: state,\n    navigation: navigation,\n    descriptors: descriptors\n  })));\n}\nexport default createNavigatorFactory(MaterialTopTabNavigator);","map":{"version":3,"names":["createNavigatorFactory","TabRouter","useNavigationBuilder","React","warnOnce","MaterialTopTabView","MaterialTopTabNavigator","_ref","id","initialRouteName","backBehavior","children","screenListeners","screenOptions","restWithDeprecated","_objectWithoutProperties","_excluded","swipeEnabled","lazy","lazyPlaceholder","lazyPreloadDistance","tabBarOptions","rest","_excluded2","defaultScreenOptions","Object","assign","tabBarActiveTintColor","activeTintColor","tabBarInactiveTintColor","inactiveTintColor","tabBarPressColor","pressColor","tabBarPressOpacity","pressOpacity","tabBarShowLabel","showLabel","tabBarShowIcon","showIcon","tabBarAllowFontScaling","allowFontScaling","tabBarBounces","bounces","tabBarScrollEnabled","scrollEnabled","tabBarIconStyle","iconStyle","tabBarLabelStyle","labelStyle","tabBarItemStyle","tabStyle","tabBarBadge","renderBadge","tabBarIndicator","renderIndicator","tabBarIndicatorStyle","indicatorStyle","tabBarIndicatorContainerStyle","indicatorContainerStyle","tabBarContentContainerStyle","contentContainerStyle","tabBarStyle","style","keys","forEach","key","undefined","JSON","stringify","deprecatedProps","entries","_ref2","propName","propValue","toLowerCase","state","descriptors","navigation","NavigationContent","createElement","_extends"],"sources":["D:\\HK2_Nam4\\CNM\\BTL\\New_3\\AppZalo_CNM\\Frontend\\Mobile\\zalofake\\node_modules\\@react-navigation\\material-top-tabs\\src\\navigators\\createMaterialTopTabNavigator.tsx"],"sourcesContent":["import {\n  createNavigatorFactory,\n  DefaultNavigatorOptions,\n  ParamListBase,\n  TabActionHelpers,\n  TabNavigationState,\n  TabRouter,\n  TabRouterOptions,\n  useNavigationBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport warnOnce from 'warn-once';\n\nimport type {\n  MaterialTopTabNavigationConfig,\n  MaterialTopTabNavigationEventMap,\n  MaterialTopTabNavigationOptions,\n} from '../types';\nimport MaterialTopTabView from '../views/MaterialTopTabView';\n\ntype Props = DefaultNavigatorOptions<\n  ParamListBase,\n  TabNavigationState<ParamListBase>,\n  MaterialTopTabNavigationOptions,\n  MaterialTopTabNavigationEventMap\n> &\n  TabRouterOptions &\n  MaterialTopTabNavigationConfig;\n\nfunction MaterialTopTabNavigator({\n  id,\n  initialRouteName,\n  backBehavior,\n  children,\n  screenListeners,\n  screenOptions,\n  ...restWithDeprecated\n}: Props) {\n  const {\n    // @ts-expect-error: swipeEnabled is deprecated\n    swipeEnabled,\n    // @ts-expect-error: lazy is deprecated\n    lazy,\n    // @ts-expect-error: lazyPlaceholder is deprecated\n    lazyPlaceholder,\n    // @ts-expect-error: lazyPreloadDistance is deprecated\n    lazyPreloadDistance,\n    // @ts-expect-error: tabBarOptions is deprecated\n    tabBarOptions,\n    ...rest\n  } = restWithDeprecated;\n\n  let defaultScreenOptions: MaterialTopTabNavigationOptions = {};\n\n  if (tabBarOptions) {\n    Object.assign(defaultScreenOptions, {\n      tabBarActiveTintColor: tabBarOptions.activeTintColor,\n      tabBarInactiveTintColor: tabBarOptions.inactiveTintColor,\n      tabBarPressColor: tabBarOptions.pressColor,\n      tabBarPressOpacity: tabBarOptions.pressOpacity,\n      tabBarShowLabel: tabBarOptions.showLabel,\n      tabBarShowIcon: tabBarOptions.showIcon,\n      tabBarAllowFontScaling: tabBarOptions.allowFontScaling,\n      tabBarBounces: tabBarOptions.bounces,\n      tabBarScrollEnabled: tabBarOptions.scrollEnabled,\n      tabBarIconStyle: tabBarOptions.iconStyle,\n      tabBarLabelStyle: tabBarOptions.labelStyle,\n      tabBarItemStyle: tabBarOptions.tabStyle,\n      tabBarBadge: tabBarOptions.renderBadge,\n      tabBarIndicator: tabBarOptions.renderIndicator,\n      tabBarIndicatorStyle: tabBarOptions.indicatorStyle,\n      tabBarIndicatorContainerStyle: tabBarOptions.indicatorContainerStyle,\n      tabBarContentContainerStyle: tabBarOptions.contentContainerStyle,\n      tabBarStyle: tabBarOptions.style,\n    });\n\n    (\n      Object.keys(\n        defaultScreenOptions\n      ) as (keyof MaterialTopTabNavigationOptions)[]\n    ).forEach((key) => {\n      if (defaultScreenOptions[key] === undefined) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete defaultScreenOptions[key];\n      }\n    });\n\n    warnOnce(\n      tabBarOptions,\n      `Material Top Tab Navigator: 'tabBarOptions' is deprecated. Migrate the options to 'screenOptions' instead.\\n\\nPlace the following in 'screenOptions' in your code to keep current behavior:\\n\\n${JSON.stringify(\n        defaultScreenOptions,\n        null,\n        2\n      )}\\n\\nSee https://reactnavigation.org/docs/material-top-tab-navigator#options for more details.`\n    );\n  }\n\n  const deprecatedProps = {\n    swipeEnabled,\n    lazy,\n    lazyPlaceholder,\n    lazyPreloadDistance,\n  } as const;\n\n  Object.entries(deprecatedProps).forEach(([propName, propValue]) => {\n    if (propValue !== undefined) {\n      // @ts-expect-error: Object.entries doesn't return strict types\n      defaultScreenOptions[propName] = propValue;\n\n      warnOnce(\n        true,\n        `Material Top Tab Navigator: '${propName}' in props is deprecated. Move it to 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/material-top-tab-navigator#${propName.toLowerCase()} for more details.`\n      );\n    }\n  });\n\n  const { state, descriptors, navigation, NavigationContent } =\n    useNavigationBuilder<\n      TabNavigationState<ParamListBase>,\n      TabRouterOptions,\n      TabActionHelpers<ParamListBase>,\n      MaterialTopTabNavigationOptions,\n      MaterialTopTabNavigationEventMap\n    >(TabRouter, {\n      id,\n      initialRouteName,\n      backBehavior,\n      children,\n      screenListeners,\n      screenOptions,\n      defaultScreenOptions,\n    });\n\n  return (\n    <NavigationContent>\n      <MaterialTopTabView\n        {...rest}\n        state={state}\n        navigation={navigation}\n        descriptors={descriptors}\n      />\n    </NavigationContent>\n  );\n}\n\nexport default createNavigatorFactory<\n  TabNavigationState<ParamListBase>,\n  MaterialTopTabNavigationOptions,\n  MaterialTopTabNavigationEventMap,\n  typeof MaterialTopTabNavigator\n>(MaterialTopTabNavigator);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}