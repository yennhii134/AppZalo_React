{"ast":null,"code":"import createIconSet from './createIconSet';\nexport default function (config, expoFontName, expoAssetId) {\n  const glyphMap = {};\n  config.icons.forEach(icon => {\n    icon.properties.name.split(/\\s*,\\s*/g).forEach(name => {\n      glyphMap[name] = icon.properties.code;\n    });\n  });\n  const fontFamily = expoFontName || config.preferences.fontPref.metadata.fontFamily;\n  return createIconSet(glyphMap, fontFamily, expoAssetId || `${fontFamily}.ttf`);\n}","map":{"version":3,"names":["createIconSet","config","expoFontName","expoAssetId","glyphMap","icons","forEach","icon","properties","name","split","code","fontFamily","preferences","fontPref","metadata"],"sources":["D:\\HK2_Nam4\\CNM\\BTL\\New_3\\AppZalo_CNM\\Frontend\\Mobile\\zalofake\\node_modules\\@expo\\vector-icons\\src\\createIconSetFromIcoMoon.ts"],"sourcesContent":["import createIconSet from './createIconSet';\n\nexport default function (config, expoFontName, expoAssetId) {\n  const glyphMap = {};\n  config.icons.forEach((icon) => {\n    icon.properties.name.split(/\\s*,\\s*/g).forEach((name) => {\n      glyphMap[name] = icon.properties.code;\n    });\n  });\n\n  const fontFamily = expoFontName || config.preferences.fontPref.metadata.fontFamily;\n\n  return createIconSet<string, string>(glyphMap, fontFamily, expoAssetId || `${fontFamily}.ttf`);\n}\n"],"mappings":"AAAA,OAAOA,aAAa,MAAM,iBAAiB;AAE3C,eAAc,UAAWC,MAAM,EAAEC,YAAY,EAAEC,WAAW;EACxD,MAAMC,QAAQ,GAAG,EAAE;EACnBH,MAAM,CAACI,KAAK,CAACC,OAAO,CAAEC,IAAI,IAAI;IAC5BA,IAAI,CAACC,UAAU,CAACC,IAAI,CAACC,KAAK,CAAC,UAAU,CAAC,CAACJ,OAAO,CAAEG,IAAI,IAAI;MACtDL,QAAQ,CAACK,IAAI,CAAC,GAAGF,IAAI,CAACC,UAAU,CAACG,IAAI;IACvC,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,MAAMC,UAAU,GAAGV,YAAY,IAAID,MAAM,CAACY,WAAW,CAACC,QAAQ,CAACC,QAAQ,CAACH,UAAU;EAElF,OAAOZ,aAAa,CAAiBI,QAAQ,EAAEQ,UAAU,EAAET,WAAW,IAAI,GAAGS,UAAU,MAAM,CAAC;AAChG"},"metadata":{},"sourceType":"module","externalDependencies":[]}