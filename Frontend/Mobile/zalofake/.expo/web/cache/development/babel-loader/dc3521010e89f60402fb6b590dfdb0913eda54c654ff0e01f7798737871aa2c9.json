{"ast":null,"code":"var _jsxFileName = \"D:\\\\HK2_Nam4\\\\CNM\\\\BTL\\\\New_3\\\\AppZalo_CNM\\\\Frontend\\\\Mobile\\\\zalofake\\\\node_modules\\\\react-native-elements\\\\dist\\\\config\\\\ThemeProvider.js\";\nimport React from 'react';\nimport deepmerge from 'deepmerge';\nimport colors from './colors';\nimport darkColors from './colorsDark';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ThemeContext = React.createContext({\n  theme: {\n    colors\n  }\n});\nexport default class ThemeProvider extends React.Component {\n  constructor(props) {\n    super(props);\n    this.updateTheme = updates => {\n      this.setState(({\n        theme\n      }) => ({\n        theme: deepmerge(theme, updates)\n      }));\n    };\n    this.replaceTheme = theme => {\n      this.setState(() => ({\n        theme: deepmerge(this.defaultTheme, theme)\n      }));\n    };\n    this.getTheme = () => this.state.theme;\n    const defaultColors = props.useDark ? darkColors : colors;\n    this.defaultTheme = deepmerge({\n      colors: defaultColors\n    }, props.theme);\n    this.state = {\n      theme: this.defaultTheme,\n      useDark: Boolean(props.useDark)\n    };\n  }\n  static getDerivedStateFromProps(props, state) {\n    const {\n      useDark\n    } = props;\n    const isTheme = theme => {\n      return !(Object.keys(theme).length === 0 && theme.constructor === Object);\n    };\n    if (useDark !== state.useDark || isTheme(props.theme) && props.theme !== state.theme) {\n      const defaultColors = useDark ? darkColors : colors;\n      return {\n        theme: deepmerge(state.theme, deepmerge({\n          colors: defaultColors\n        }, props.theme)),\n        useDark\n      };\n    }\n    return null;\n  }\n  render() {\n    return _jsxDEV(ThemeContext.Provider, {\n      value: {\n        theme: this.state.theme,\n        updateTheme: this.updateTheme,\n        replaceTheme: this.replaceTheme\n      },\n      children: this.props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }, this);\n  }\n}\nThemeProvider.defaultProps = {\n  theme: {},\n  useDark: false\n};\nexport const ThemeConsumer = ThemeContext.Consumer;","map":{"version":3,"names":["React","deepmerge","colors","darkColors","jsxDEV","_jsxDEV","ThemeContext","createContext","theme","ThemeProvider","Component","constructor","props","updateTheme","updates","setState","replaceTheme","defaultTheme","getTheme","state","defaultColors","useDark","Boolean","getDerivedStateFromProps","isTheme","Object","keys","length","render","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","defaultProps","ThemeConsumer","Consumer"],"sources":["D:/HK2_Nam4/CNM/BTL/New_3/AppZalo_CNM/Frontend/Mobile/zalofake/node_modules/react-native-elements/dist/config/ThemeProvider.js"],"sourcesContent":["import React from 'react';\nimport deepmerge from 'deepmerge';\nimport colors from './colors';\nimport darkColors from './colorsDark';\nexport const ThemeContext = React.createContext({\n    theme: {\n        colors,\n    },\n});\nexport default class ThemeProvider extends React.Component {\n    constructor(props) {\n        super(props);\n        this.updateTheme = (updates) => {\n            this.setState(({ theme }) => ({\n                theme: deepmerge(theme, updates),\n            }));\n        };\n        this.replaceTheme = (theme) => {\n            this.setState(() => ({\n                theme: deepmerge(this.defaultTheme, theme),\n            }));\n        };\n        this.getTheme = () => this.state.theme;\n        const defaultColors = props.useDark ? darkColors : colors;\n        this.defaultTheme = deepmerge({\n            colors: defaultColors,\n        }, props.theme);\n        this.state = {\n            theme: this.defaultTheme,\n            useDark: Boolean(props.useDark),\n        };\n    }\n    static getDerivedStateFromProps(props, state) {\n        const { useDark } = props;\n        const isTheme = (theme) => {\n            return !(Object.keys(theme).length === 0 && theme.constructor === Object);\n        };\n        //isTheme will check if the theme is provided by user and will update the theme only if its provided by user\n        //Not checking if the theme exist or not will always result in if statement getting executed as props.theme !== state.theme if theme is not provided\n        if (useDark !== state.useDark ||\n            (isTheme(props.theme) && props.theme !== state.theme)) {\n            const defaultColors = useDark ? darkColors : colors;\n            return {\n                theme: deepmerge(state.theme, deepmerge({\n                    colors: defaultColors,\n                }, props.theme)),\n                useDark,\n            };\n        }\n        return null;\n    }\n    render() {\n        return (<ThemeContext.Provider value={{\n                theme: this.state.theme,\n                updateTheme: this.updateTheme,\n                replaceTheme: this.replaceTheme,\n            }}>\n        {this.props.children}\n      </ThemeContext.Provider>);\n    }\n}\nThemeProvider.defaultProps = {\n    theme: {},\n    useDark: false,\n};\nexport const ThemeConsumer = ThemeContext.Consumer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}