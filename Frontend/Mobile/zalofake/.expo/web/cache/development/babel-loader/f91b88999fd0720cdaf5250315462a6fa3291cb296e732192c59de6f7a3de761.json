{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport color from 'color';\nimport { AdornmentSide, AdornmentType } from './Adornment/enums';\nimport { MIN_WIDTH, ADORNMENT_SIZE, MD2_ADORNMENT_OFFSET, MD2_AFFIX_OFFSET, MD2_FLAT_INPUT_OFFSET, MD2_ICON_OFFSET, MD2_INPUT_PADDING_HORIZONTAL, MD2_LABEL_PADDING_HORIZONTAL, MD2_LABEL_PADDING_TOP, MD2_MIN_HEIGHT, MD2_OUTLINED_INPUT_OFFSET, MD3_ADORNMENT_OFFSET, MD3_AFFIX_OFFSET, MD3_FLAT_INPUT_OFFSET, MD3_ICON_OFFSET, MD3_INPUT_PADDING_HORIZONTAL, MD3_LABEL_PADDING_HORIZONTAL, MD3_LABEL_PADDING_TOP, MD3_MIN_HEIGHT, MD3_OUTLINED_INPUT_OFFSET } from './constants';\nexport const calculateLabelTopPosition = function (labelHeight) {\n  let height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let optionalPadding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  const customHeight = height > 0 ? height : 0;\n  return Math.floor((customHeight - labelHeight) / 2 + optionalPadding);\n};\nexport const calculateInputHeight = function (labelHeight) {\n  let height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let minHeight = arguments.length > 2 ? arguments[2] : undefined;\n  const finalHeight = height > 0 ? height : labelHeight;\n  if (height > 0) return height;\n  return finalHeight < minHeight ? minHeight : finalHeight;\n};\nexport const calculatePadding = props => {\n  const {\n    height,\n    multiline = false\n  } = props;\n  let result = 0;\n  if (multiline) {\n    if (height && multiline) {\n      result = calculateTextAreaPadding(props);\n    } else {\n      result = calculateInputPadding(props);\n    }\n  }\n  return Math.max(0, result);\n};\nconst calculateTextAreaPadding = props => {\n  const {\n    dense\n  } = props;\n  return dense ? 10 : 20;\n};\nconst calculateInputPadding = _ref => {\n  let {\n    topPosition,\n    fontSize,\n    multiline,\n    scale,\n    dense,\n    offset,\n    isAndroid\n  } = _ref;\n  const refFontSize = scale * fontSize;\n  let result = Math.floor(topPosition / 2);\n  result = result + Math.floor((refFontSize - fontSize) / 2) - (scale < 1 ? offset / 2 : 0);\n  if (multiline && isAndroid) result = Math.min(dense ? offset / 2 : offset, result);\n  return result;\n};\nexport const adjustPaddingOut = _ref2 => {\n  let {\n    pad,\n    multiline,\n    label,\n    scale,\n    height,\n    fontSize,\n    lineHeight,\n    dense,\n    offset,\n    isAndroid\n  } = _ref2;\n  const fontHeight = lineHeight ?? fontSize;\n  const refFontHeight = scale * fontSize;\n  let result = pad;\n  if (height && !multiline) {\n    return {\n      paddingTop: Math.max(0, (height - fontHeight) / 2),\n      paddingBottom: Math.max(0, (height - fontHeight) / 2)\n    };\n  }\n  if (!isAndroid && multiline) {\n    if (dense) {\n      if (label) {\n        result += scale < 1 ? Math.min(offset, refFontHeight / 2 * scale) : 0;\n      } else {\n        result += 0;\n      }\n    }\n    if (!dense) {\n      if (label) {\n        result += scale < 1 ? Math.min(offset, refFontHeight * scale) : Math.min(offset / 2, refFontHeight * scale);\n      } else {\n        result += scale < 1 ? Math.min(offset / 2, refFontHeight * scale) : 0;\n      }\n    }\n    result = Math.floor(result);\n  }\n  return {\n    paddingTop: result,\n    paddingBottom: result\n  };\n};\nexport const adjustPaddingFlat = _ref3 => {\n  let {\n    pad,\n    scale,\n    multiline,\n    label,\n    height,\n    offset,\n    dense,\n    fontSize,\n    isAndroid,\n    styles\n  } = _ref3;\n  let result = pad;\n  let topResult = result;\n  let bottomResult = result;\n  const {\n    paddingTop,\n    paddingBottom\n  } = styles;\n  const refFontSize = scale * fontSize;\n  if (!multiline) {\n    if (label) {\n      return {\n        paddingTop,\n        paddingBottom\n      };\n    }\n    return {\n      paddingTop: result,\n      paddingBottom: result\n    };\n  }\n  if (label) {\n    topResult = paddingTop;\n    bottomResult = paddingBottom;\n    if (!isAndroid) {\n      if (dense) {\n        topResult += scale < 1 ? Math.min(result, refFontSize * scale) - result / 2 : Math.min(result, refFontSize * scale) - result / 2;\n      }\n      if (!dense) {\n        topResult += scale < 1 ? Math.min(offset / 2, refFontSize * scale) : Math.min(result, refFontSize * scale) - offset / 2;\n      }\n    }\n    topResult = Math.floor(topResult);\n  } else {\n    if (height) {\n      return {\n        paddingTop: Math.max(0, (height - fontSize) / 2),\n        paddingBottom: Math.max(0, (height - fontSize) / 2)\n      };\n    }\n    if (!isAndroid) {\n      if (dense) {\n        result += scale < 1 ? Math.min(offset / 2, fontSize / 2 * scale) : Math.min(offset / 2, scale);\n      }\n      if (!dense) {\n        result += scale < 1 ? Math.min(offset, fontSize * scale) : Math.min(fontSize, offset / 2 * scale);\n      }\n      result = Math.floor(result);\n      topResult = result;\n      bottomResult = result;\n    }\n  }\n  return {\n    paddingTop: Math.max(0, topResult),\n    paddingBottom: Math.max(0, bottomResult)\n  };\n};\nexport function calculateFlatAffixTopPosition(_ref4) {\n  let {\n    height,\n    paddingTop,\n    paddingBottom,\n    affixHeight\n  } = _ref4;\n  const inputHeightWithoutPadding = height - paddingTop - paddingBottom;\n  const halfOfTheInputHeightDecreasedByAffixHeight = (inputHeightWithoutPadding - affixHeight) / 2;\n  return paddingTop + halfOfTheInputHeightDecreasedByAffixHeight;\n}\nexport function calculateOutlinedIconAndAffixTopPosition(_ref5) {\n  let {\n    height,\n    affixHeight,\n    labelYOffset\n  } = _ref5;\n  return (height - affixHeight + labelYOffset) / 2;\n}\nexport const calculateFlatInputHorizontalPadding = _ref6 => {\n  let {\n    adornmentConfig,\n    isV3\n  } = _ref6;\n  const {\n    LABEL_PADDING_HORIZONTAL,\n    ADORNMENT_OFFSET,\n    FLAT_INPUT_OFFSET\n  } = getConstants(isV3);\n  let paddingLeft = LABEL_PADDING_HORIZONTAL;\n  let paddingRight = LABEL_PADDING_HORIZONTAL;\n  adornmentConfig.forEach(_ref7 => {\n    let {\n      type,\n      side\n    } = _ref7;\n    if (type === AdornmentType.Icon && side === AdornmentSide.Left) {\n      paddingLeft = ADORNMENT_SIZE + ADORNMENT_OFFSET + FLAT_INPUT_OFFSET;\n    } else if (side === AdornmentSide.Right) {\n      if (type === AdornmentType.Affix) {\n        paddingRight = ADORNMENT_SIZE + ADORNMENT_OFFSET + FLAT_INPUT_OFFSET;\n      } else if (type === AdornmentType.Icon) {\n        paddingRight = ADORNMENT_SIZE + ADORNMENT_OFFSET + FLAT_INPUT_OFFSET;\n      }\n    }\n  });\n  return {\n    paddingLeft,\n    paddingRight\n  };\n};\nconst getInputTextColor = _ref8 => {\n  let {\n    theme,\n    textColor,\n    disabled\n  } = _ref8;\n  if (textColor) {\n    return textColor;\n  }\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n    return theme.colors.onSurface;\n  }\n  if (disabled) {\n    return color(theme.colors.text).alpha(0.54).rgb().string();\n  }\n  return theme.colors.text;\n};\nconst getActiveColor = _ref9 => {\n  let {\n    theme,\n    disabled,\n    error,\n    activeUnderlineColor,\n    activeOutlineColor,\n    mode\n  } = _ref9;\n  const isFlat = mode === 'flat';\n  const modeColor = isFlat ? activeUnderlineColor : activeOutlineColor;\n  if (error) {\n    return theme.colors.error;\n  }\n  if (modeColor) {\n    return modeColor;\n  }\n  if (disabled) {\n    if (theme.isV3) {\n      return theme.colors.onSurfaceDisabled;\n    }\n    return color(theme.colors.text).alpha(0.54).rgb().string();\n  }\n  return theme.colors.primary;\n};\nconst getPlaceholderColor = _ref10 => {\n  let {\n    theme,\n    disabled\n  } = _ref10;\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n    return theme.colors.onSurfaceVariant;\n  }\n  if (disabled) {\n    return theme.colors.disabled;\n  }\n  return theme.colors.placeholder;\n};\nconst getSelectionColor = _ref11 => {\n  let {\n    activeColor,\n    customSelectionColor\n  } = _ref11;\n  if (typeof customSelectionColor !== 'undefined') {\n    return customSelectionColor;\n  }\n  if (Platform.OS === 'android') {\n    return color(activeColor).alpha(0.54).rgb().string();\n  }\n  return activeColor;\n};\nconst getFlatBackgroundColor = _ref12 => {\n  var _theme$colors, _theme$colors2;\n  let {\n    theme,\n    disabled\n  } = _ref12;\n  if (theme.isV3) {\n    if (disabled) {\n      return color(theme.colors.onSurface).alpha(0.04).rgb().string();\n    } else {\n      return theme.colors.surfaceVariant;\n    }\n  }\n  if (disabled) {\n    return undefined;\n  }\n  return theme.dark ? color((_theme$colors = theme.colors) === null || _theme$colors === void 0 ? void 0 : _theme$colors.background).lighten(0.24).rgb().string() : color((_theme$colors2 = theme.colors) === null || _theme$colors2 === void 0 ? void 0 : _theme$colors2.background).darken(0.06).rgb().string();\n};\nconst getFlatUnderlineColor = _ref13 => {\n  let {\n    theme,\n    disabled,\n    underlineColor\n  } = _ref13;\n  if (!disabled && underlineColor) {\n    return underlineColor;\n  }\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n    return theme.colors.onSurfaceVariant;\n  }\n  if (disabled) {\n    return 'transparent';\n  }\n  return theme.colors.disabled;\n};\nconst getOutlinedOutlineInputColor = _ref14 => {\n  let {\n    theme,\n    disabled,\n    customOutlineColor\n  } = _ref14;\n  const isTransparent = color(customOutlineColor).alpha() === 0;\n  if (!disabled && customOutlineColor) {\n    return customOutlineColor;\n  }\n  if (theme.isV3) {\n    if (disabled) {\n      if (theme.dark) {\n        return 'transparent';\n      }\n      return theme.colors.surfaceDisabled;\n    }\n    return theme.colors.outline;\n  }\n  if (disabled) {\n    if (isTransparent) {\n      return customOutlineColor;\n    }\n    return theme.colors.disabled;\n  }\n  return theme.colors.placeholder;\n};\nexport const getFlatInputColors = _ref15 => {\n  let {\n    underlineColor,\n    activeUnderlineColor,\n    customSelectionColor,\n    textColor,\n    disabled,\n    error,\n    theme\n  } = _ref15;\n  const baseFlatColorProps = {\n    theme,\n    disabled\n  };\n  const activeColor = getActiveColor(_objectSpread(_objectSpread({}, baseFlatColorProps), {}, {\n    error,\n    activeUnderlineColor,\n    mode: 'flat'\n  }));\n  return {\n    inputTextColor: getInputTextColor(_objectSpread(_objectSpread({}, baseFlatColorProps), {}, {\n      textColor\n    })),\n    activeColor,\n    underlineColorCustom: getFlatUnderlineColor(_objectSpread(_objectSpread({}, baseFlatColorProps), {}, {\n      underlineColor\n    })),\n    placeholderColor: getPlaceholderColor(baseFlatColorProps),\n    selectionColor: getSelectionColor({\n      activeColor,\n      customSelectionColor\n    }),\n    errorColor: theme.colors.error,\n    backgroundColor: getFlatBackgroundColor(baseFlatColorProps)\n  };\n};\nexport const getOutlinedInputColors = _ref16 => {\n  let {\n    activeOutlineColor,\n    customOutlineColor,\n    customSelectionColor,\n    textColor,\n    disabled,\n    error,\n    theme\n  } = _ref16;\n  const baseOutlinedColorProps = {\n    theme,\n    disabled\n  };\n  const activeColor = getActiveColor(_objectSpread(_objectSpread({}, baseOutlinedColorProps), {}, {\n    error,\n    activeOutlineColor,\n    mode: 'outlined'\n  }));\n  return {\n    inputTextColor: getInputTextColor(_objectSpread(_objectSpread({}, baseOutlinedColorProps), {}, {\n      textColor\n    })),\n    activeColor,\n    outlineColor: getOutlinedOutlineInputColor(_objectSpread(_objectSpread({}, baseOutlinedColorProps), {}, {\n      customOutlineColor\n    })),\n    placeholderColor: getPlaceholderColor(baseOutlinedColorProps),\n    selectionColor: getSelectionColor({\n      activeColor,\n      customSelectionColor\n    }),\n    errorColor: theme.colors.error\n  };\n};\nexport const getConstants = isV3 => {\n  let AFFIX_OFFSET;\n  let ICON_OFFSET;\n  let LABEL_PADDING_TOP;\n  let LABEL_PADDING_HORIZONTAL;\n  let FLAT_INPUT_OFFSET;\n  let MIN_HEIGHT;\n  let INPUT_PADDING_HORIZONTAL;\n  let ADORNMENT_OFFSET;\n  let OUTLINED_INPUT_OFFSET;\n  if (isV3) {\n    AFFIX_OFFSET = MD3_AFFIX_OFFSET;\n    ICON_OFFSET = MD3_ICON_OFFSET;\n    LABEL_PADDING_TOP = MD3_LABEL_PADDING_TOP;\n    LABEL_PADDING_HORIZONTAL = MD3_LABEL_PADDING_HORIZONTAL;\n    FLAT_INPUT_OFFSET = MD3_FLAT_INPUT_OFFSET;\n    MIN_HEIGHT = MD3_MIN_HEIGHT;\n    INPUT_PADDING_HORIZONTAL = MD3_INPUT_PADDING_HORIZONTAL;\n    ADORNMENT_OFFSET = MD3_ADORNMENT_OFFSET;\n    OUTLINED_INPUT_OFFSET = MD3_OUTLINED_INPUT_OFFSET;\n  } else {\n    AFFIX_OFFSET = MD2_AFFIX_OFFSET;\n    ICON_OFFSET = MD2_ICON_OFFSET;\n    LABEL_PADDING_TOP = MD2_LABEL_PADDING_TOP;\n    LABEL_PADDING_HORIZONTAL = MD2_LABEL_PADDING_HORIZONTAL;\n    FLAT_INPUT_OFFSET = MD2_FLAT_INPUT_OFFSET;\n    MIN_HEIGHT = MD2_MIN_HEIGHT;\n    INPUT_PADDING_HORIZONTAL = MD2_INPUT_PADDING_HORIZONTAL;\n    ADORNMENT_OFFSET = MD2_ADORNMENT_OFFSET;\n    OUTLINED_INPUT_OFFSET = MD2_OUTLINED_INPUT_OFFSET;\n  }\n  return {\n    AFFIX_OFFSET,\n    ICON_OFFSET,\n    LABEL_PADDING_TOP,\n    LABEL_PADDING_HORIZONTAL,\n    FLAT_INPUT_OFFSET,\n    MIN_HEIGHT,\n    INPUT_PADDING_HORIZONTAL,\n    ADORNMENT_OFFSET,\n    OUTLINED_INPUT_OFFSET,\n    MIN_WIDTH\n  };\n};","map":{"version":3,"names":["color","AdornmentSide","AdornmentType","MIN_WIDTH","ADORNMENT_SIZE","MD2_ADORNMENT_OFFSET","MD2_AFFIX_OFFSET","MD2_FLAT_INPUT_OFFSET","MD2_ICON_OFFSET","MD2_INPUT_PADDING_HORIZONTAL","MD2_LABEL_PADDING_HORIZONTAL","MD2_LABEL_PADDING_TOP","MD2_MIN_HEIGHT","MD2_OUTLINED_INPUT_OFFSET","MD3_ADORNMENT_OFFSET","MD3_AFFIX_OFFSET","MD3_FLAT_INPUT_OFFSET","MD3_ICON_OFFSET","MD3_INPUT_PADDING_HORIZONTAL","MD3_LABEL_PADDING_HORIZONTAL","MD3_LABEL_PADDING_TOP","MD3_MIN_HEIGHT","MD3_OUTLINED_INPUT_OFFSET","calculateLabelTopPosition","labelHeight","height","arguments","length","undefined","optionalPadding","customHeight","Math","floor","calculateInputHeight","minHeight","finalHeight","calculatePadding","props","multiline","result","calculateTextAreaPadding","calculateInputPadding","max","dense","_ref","topPosition","fontSize","scale","offset","isAndroid","refFontSize","min","adjustPaddingOut","_ref2","pad","label","lineHeight","fontHeight","refFontHeight","paddingTop","paddingBottom","adjustPaddingFlat","_ref3","styles","topResult","bottomResult","calculateFlatAffixTopPosition","_ref4","affixHeight","inputHeightWithoutPadding","halfOfTheInputHeightDecreasedByAffixHeight","calculateOutlinedIconAndAffixTopPosition","_ref5","labelYOffset","calculateFlatInputHorizontalPadding","_ref6","adornmentConfig","isV3","LABEL_PADDING_HORIZONTAL","ADORNMENT_OFFSET","FLAT_INPUT_OFFSET","getConstants","paddingLeft","paddingRight","forEach","_ref7","type","side","Icon","Left","Right","Affix","getInputTextColor","_ref8","theme","textColor","disabled","colors","onSurfaceDisabled","onSurface","text","alpha","rgb","string","getActiveColor","_ref9","error","activeUnderlineColor","activeOutlineColor","mode","isFlat","modeColor","primary","getPlaceholderColor","_ref10","onSurfaceVariant","placeholder","getSelectionColor","_ref11","activeColor","customSelectionColor","Platform","OS","getFlatBackgroundColor","_ref12","_theme$colors","_theme$colors2","surfaceVariant","dark","background","lighten","darken","getFlatUnderlineColor","_ref13","underlineColor","getOutlinedOutlineInputColor","_ref14","customOutlineColor","isTransparent","surfaceDisabled","outline","getFlatInputColors","_ref15","baseFlatColorProps","_objectSpread","inputTextColor","underlineColorCustom","placeholderColor","selectionColor","errorColor","backgroundColor","getOutlinedInputColors","_ref16","baseOutlinedColorProps","outlineColor","AFFIX_OFFSET","ICON_OFFSET","LABEL_PADDING_TOP","MIN_HEIGHT","INPUT_PADDING_HORIZONTAL","OUTLINED_INPUT_OFFSET"],"sources":["D:\\HK2_Nam4\\CNM\\BTL\\New_3\\AppZalo_CNM\\Frontend\\Mobile\\zalofake\\node_modules\\react-native-paper\\src\\components\\TextInput\\helpers.tsx"],"sourcesContent":["import { Platform } from 'react-native';\n\nimport color from 'color';\n\nimport { AdornmentSide, AdornmentType } from './Adornment/enums';\nimport type { AdornmentConfig } from './Adornment/types';\nimport {\n  MIN_WIDTH,\n  ADORNMENT_SIZE,\n  MD2_ADORNMENT_OFFSET,\n  MD2_AFFIX_OFFSET,\n  MD2_FLAT_INPUT_OFFSET,\n  MD2_ICON_OFFSET,\n  MD2_INPUT_PADDING_HORIZONTAL,\n  MD2_LABEL_PADDING_HORIZONTAL,\n  MD2_LABEL_PADDING_TOP,\n  MD2_MIN_HEIGHT,\n  MD2_OUTLINED_INPUT_OFFSET,\n  MD3_ADORNMENT_OFFSET,\n  MD3_AFFIX_OFFSET,\n  MD3_FLAT_INPUT_OFFSET,\n  MD3_ICON_OFFSET,\n  MD3_INPUT_PADDING_HORIZONTAL,\n  MD3_LABEL_PADDING_HORIZONTAL,\n  MD3_LABEL_PADDING_TOP,\n  MD3_MIN_HEIGHT,\n  MD3_OUTLINED_INPUT_OFFSET,\n} from './constants';\nimport type { TextInputLabelProp } from './types';\nimport type { InternalTheme } from '../../types';\n\ntype PaddingProps = {\n  height: number | null;\n  labelHalfHeight: number;\n  multiline: boolean | null;\n  dense: boolean | null;\n  topPosition: number;\n  fontSize: number;\n  lineHeight?: number;\n  label?: TextInputLabelProp | null;\n  scale: number;\n  offset: number;\n  isAndroid: boolean;\n  styles: { paddingTop: number; paddingBottom: number };\n};\n\ntype AdjProps = PaddingProps & {\n  pad: number;\n};\n\nexport type Padding = { paddingTop: number; paddingBottom: number };\n\nexport const calculateLabelTopPosition = (\n  labelHeight: number,\n  height: number = 0,\n  optionalPadding: number = 0\n): number => {\n  const customHeight = height > 0 ? height : 0;\n\n  return Math.floor((customHeight - labelHeight) / 2 + optionalPadding);\n};\n\nexport const calculateInputHeight = (\n  labelHeight: number,\n  height: any = 0,\n  minHeight: number\n): number => {\n  const finalHeight = height > 0 ? height : labelHeight;\n\n  if (height > 0) return height;\n  return finalHeight < minHeight ? minHeight : finalHeight;\n};\n\nexport const calculatePadding = (props: PaddingProps): number => {\n  const { height, multiline = false } = props;\n\n  let result = 0;\n\n  if (multiline) {\n    if (height && multiline) {\n      result = calculateTextAreaPadding(props);\n    } else {\n      result = calculateInputPadding(props);\n    }\n  }\n\n  return Math.max(0, result);\n};\n\nconst calculateTextAreaPadding = (props: PaddingProps) => {\n  const { dense } = props;\n\n  return dense ? 10 : 20;\n};\n\nconst calculateInputPadding = ({\n  topPosition,\n  fontSize,\n  multiline,\n  scale,\n  dense,\n  offset,\n  isAndroid,\n}: PaddingProps): number => {\n  const refFontSize = scale * fontSize;\n  let result = Math.floor(topPosition / 2);\n\n  result =\n    result +\n    Math.floor((refFontSize - fontSize) / 2) -\n    (scale < 1 ? offset / 2 : 0);\n\n  if (multiline && isAndroid)\n    result = Math.min(dense ? offset / 2 : offset, result);\n\n  return result;\n};\n\nexport const adjustPaddingOut = ({\n  pad,\n  multiline,\n  label,\n  scale,\n  height,\n  fontSize,\n  lineHeight,\n  dense,\n  offset,\n  isAndroid,\n}: AdjProps): Padding => {\n  const fontHeight = lineHeight ?? fontSize;\n  const refFontHeight = scale * fontSize;\n  let result = pad;\n\n  if (height && !multiline) {\n    return {\n      paddingTop: Math.max(0, (height - fontHeight) / 2),\n      paddingBottom: Math.max(0, (height - fontHeight) / 2),\n    };\n  }\n  if (!isAndroid && multiline) {\n    if (dense) {\n      if (label) {\n        result += scale < 1 ? Math.min(offset, (refFontHeight / 2) * scale) : 0;\n      } else {\n        result += 0;\n      }\n    }\n    if (!dense) {\n      if (label) {\n        result +=\n          scale < 1\n            ? Math.min(offset, refFontHeight * scale)\n            : Math.min(offset / 2, refFontHeight * scale);\n      } else {\n        result += scale < 1 ? Math.min(offset / 2, refFontHeight * scale) : 0;\n      }\n    }\n    result = Math.floor(result);\n  }\n  return { paddingTop: result, paddingBottom: result };\n};\n\nexport const adjustPaddingFlat = ({\n  pad,\n  scale,\n  multiline,\n  label,\n  height,\n  offset,\n  dense,\n  fontSize,\n  isAndroid,\n  styles,\n}: AdjProps): Padding => {\n  let result = pad;\n  let topResult = result;\n  let bottomResult = result;\n  const { paddingTop, paddingBottom } = styles;\n  const refFontSize = scale * fontSize;\n\n  if (!multiline) {\n    // do not modify padding if input is not multiline\n    if (label) {\n      // return const style for flat input with label\n      return { paddingTop, paddingBottom };\n    }\n    // return pad for flat input without label\n    return { paddingTop: result, paddingBottom: result };\n  }\n\n  if (label) {\n    // add paddings passed from styles\n    topResult = paddingTop;\n    bottomResult = paddingBottom;\n\n    // adjust top padding for iOS\n    if (!isAndroid) {\n      if (dense) {\n        topResult +=\n          scale < 1\n            ? Math.min(result, refFontSize * scale) - result / 2\n            : Math.min(result, refFontSize * scale) - result / 2;\n      }\n      if (!dense) {\n        topResult +=\n          scale < 1\n            ? Math.min(offset / 2, refFontSize * scale)\n            : Math.min(result, refFontSize * scale) - offset / 2;\n      }\n    }\n    topResult = Math.floor(topResult);\n  } else {\n    if (height) {\n      // center text when height is passed\n      return {\n        paddingTop: Math.max(0, (height - fontSize) / 2),\n        paddingBottom: Math.max(0, (height - fontSize) / 2),\n      };\n    }\n    // adjust paddings for iOS if no label\n    if (!isAndroid) {\n      if (dense) {\n        result +=\n          scale < 1\n            ? Math.min(offset / 2, (fontSize / 2) * scale)\n            : Math.min(offset / 2, scale);\n      }\n      if (!dense) {\n        result +=\n          scale < 1\n            ? Math.min(offset, fontSize * scale)\n            : Math.min(fontSize, (offset / 2) * scale);\n      }\n\n      result = Math.floor(result);\n      topResult = result;\n      bottomResult = result;\n    }\n  }\n\n  return {\n    paddingTop: Math.max(0, topResult),\n    paddingBottom: Math.max(0, bottomResult),\n  };\n};\n\nexport function calculateFlatAffixTopPosition({\n  height,\n  paddingTop,\n  paddingBottom,\n  affixHeight,\n}: {\n  height: number;\n  paddingTop: number;\n  paddingBottom: number;\n  affixHeight: number;\n}): number {\n  const inputHeightWithoutPadding = height - paddingTop - paddingBottom;\n\n  const halfOfTheInputHeightDecreasedByAffixHeight =\n    (inputHeightWithoutPadding - affixHeight) / 2;\n\n  return paddingTop + halfOfTheInputHeightDecreasedByAffixHeight;\n}\n\nexport function calculateOutlinedIconAndAffixTopPosition({\n  height,\n  affixHeight,\n  labelYOffset,\n}: {\n  height: number;\n  affixHeight: number;\n  labelYOffset: number;\n}): number {\n  return (height - affixHeight + labelYOffset) / 2;\n}\n\nexport const calculateFlatInputHorizontalPadding = ({\n  adornmentConfig,\n  isV3,\n}: {\n  adornmentConfig: AdornmentConfig[];\n  isV3?: boolean;\n}) => {\n  const { LABEL_PADDING_HORIZONTAL, ADORNMENT_OFFSET, FLAT_INPUT_OFFSET } =\n    getConstants(isV3);\n\n  let paddingLeft = LABEL_PADDING_HORIZONTAL;\n  let paddingRight = LABEL_PADDING_HORIZONTAL;\n\n  adornmentConfig.forEach(({ type, side }) => {\n    if (type === AdornmentType.Icon && side === AdornmentSide.Left) {\n      paddingLeft = ADORNMENT_SIZE + ADORNMENT_OFFSET + FLAT_INPUT_OFFSET;\n    } else if (side === AdornmentSide.Right) {\n      if (type === AdornmentType.Affix) {\n        paddingRight = ADORNMENT_SIZE + ADORNMENT_OFFSET + FLAT_INPUT_OFFSET;\n      } else if (type === AdornmentType.Icon) {\n        paddingRight = ADORNMENT_SIZE + ADORNMENT_OFFSET + FLAT_INPUT_OFFSET;\n      }\n    }\n  });\n\n  return { paddingLeft, paddingRight };\n};\n\ntype BaseProps = {\n  theme: InternalTheme;\n  disabled?: boolean;\n};\n\ntype Mode = 'flat' | 'outlined';\n\nconst getInputTextColor = ({\n  theme,\n  textColor,\n  disabled,\n}: BaseProps & { textColor?: string }) => {\n  if (textColor) {\n    return textColor;\n  }\n\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n\n    return theme.colors.onSurface;\n  }\n\n  if (disabled) {\n    return color(theme.colors.text).alpha(0.54).rgb().string();\n  }\n\n  return theme.colors.text;\n};\n\nconst getActiveColor = ({\n  theme,\n  disabled,\n  error,\n  activeUnderlineColor,\n  activeOutlineColor,\n  mode,\n}: BaseProps & {\n  error?: boolean;\n  activeUnderlineColor?: string;\n  activeOutlineColor?: string;\n  mode?: Mode;\n}) => {\n  const isFlat = mode === 'flat';\n  const modeColor = isFlat ? activeUnderlineColor : activeOutlineColor;\n\n  if (error) {\n    return theme.colors.error;\n  }\n\n  if (modeColor) {\n    return modeColor;\n  }\n\n  if (disabled) {\n    if (theme.isV3) {\n      return theme.colors.onSurfaceDisabled;\n    }\n\n    return color(theme.colors.text).alpha(0.54).rgb().string();\n  }\n\n  return theme.colors.primary;\n};\n\nconst getPlaceholderColor = ({ theme, disabled }: BaseProps) => {\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n\n    return theme.colors.onSurfaceVariant;\n  }\n\n  if (disabled) {\n    return theme.colors.disabled;\n  }\n\n  return theme.colors.placeholder;\n};\n\nconst getSelectionColor = ({\n  activeColor,\n  customSelectionColor,\n}: {\n  activeColor: string;\n  customSelectionColor?: string;\n}) => {\n  if (typeof customSelectionColor !== 'undefined') {\n    return customSelectionColor;\n  }\n\n  if (Platform.OS === 'android') {\n    return color(activeColor).alpha(0.54).rgb().string();\n  }\n\n  return activeColor;\n};\n\nconst getFlatBackgroundColor = ({ theme, disabled }: BaseProps) => {\n  if (theme.isV3) {\n    if (disabled) {\n      return color(theme.colors.onSurface).alpha(0.04).rgb().string();\n    } else {\n      return theme.colors.surfaceVariant;\n    }\n  }\n\n  if (disabled) {\n    return undefined;\n  }\n\n  return theme.dark\n    ? color(theme.colors?.background).lighten(0.24).rgb().string()\n    : color(theme.colors?.background).darken(0.06).rgb().string();\n};\n\nconst getFlatUnderlineColor = ({\n  theme,\n  disabled,\n  underlineColor,\n}: BaseProps & { underlineColor?: string }) => {\n  if (!disabled && underlineColor) {\n    return underlineColor;\n  }\n\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n\n    return theme.colors.onSurfaceVariant;\n  }\n\n  if (disabled) {\n    return 'transparent';\n  }\n\n  return theme.colors.disabled;\n};\n\nconst getOutlinedOutlineInputColor = ({\n  theme,\n  disabled,\n  customOutlineColor,\n}: BaseProps & { customOutlineColor?: string }) => {\n  const isTransparent = color(customOutlineColor).alpha() === 0;\n\n  if (!disabled && customOutlineColor) {\n    return customOutlineColor;\n  }\n\n  if (theme.isV3) {\n    if (disabled) {\n      if (theme.dark) {\n        return 'transparent';\n      }\n      return theme.colors.surfaceDisabled;\n    }\n\n    return theme.colors.outline;\n  }\n\n  if (disabled) {\n    if (isTransparent) {\n      return customOutlineColor;\n    }\n    return theme.colors.disabled;\n  }\n  return theme.colors.placeholder;\n};\n\nexport const getFlatInputColors = ({\n  underlineColor,\n  activeUnderlineColor,\n  customSelectionColor,\n  textColor,\n  disabled,\n  error,\n  theme,\n}: {\n  underlineColor?: string;\n  activeUnderlineColor?: string;\n  customSelectionColor?: string;\n  textColor?: string;\n  disabled?: boolean;\n  error?: boolean;\n  theme: InternalTheme;\n}) => {\n  const baseFlatColorProps = { theme, disabled };\n  const activeColor = getActiveColor({\n    ...baseFlatColorProps,\n    error,\n    activeUnderlineColor,\n    mode: 'flat',\n  });\n\n  return {\n    inputTextColor: getInputTextColor({\n      ...baseFlatColorProps,\n      textColor,\n    }),\n    activeColor,\n    underlineColorCustom: getFlatUnderlineColor({\n      ...baseFlatColorProps,\n      underlineColor,\n    }),\n    placeholderColor: getPlaceholderColor(baseFlatColorProps),\n    selectionColor: getSelectionColor({ activeColor, customSelectionColor }),\n    errorColor: theme.colors.error,\n    backgroundColor: getFlatBackgroundColor(baseFlatColorProps),\n  };\n};\n\nexport const getOutlinedInputColors = ({\n  activeOutlineColor,\n  customOutlineColor,\n  customSelectionColor,\n  textColor,\n  disabled,\n  error,\n  theme,\n}: {\n  activeOutlineColor?: string;\n  customOutlineColor?: string;\n  customSelectionColor?: string;\n  textColor?: string;\n  disabled?: boolean;\n  error?: boolean;\n  theme: InternalTheme;\n}) => {\n  const baseOutlinedColorProps = { theme, disabled };\n  const activeColor = getActiveColor({\n    ...baseOutlinedColorProps,\n    error,\n    activeOutlineColor,\n    mode: 'outlined',\n  });\n\n  return {\n    inputTextColor: getInputTextColor({\n      ...baseOutlinedColorProps,\n      textColor,\n    }),\n    activeColor,\n    outlineColor: getOutlinedOutlineInputColor({\n      ...baseOutlinedColorProps,\n      customOutlineColor,\n    }),\n    placeholderColor: getPlaceholderColor(baseOutlinedColorProps),\n    selectionColor: getSelectionColor({ activeColor, customSelectionColor }),\n    errorColor: theme.colors.error,\n  };\n};\n\nexport const getConstants = (isV3?: boolean) => {\n  // Text input affix\n  let AFFIX_OFFSET;\n  // Text input icon\n  let ICON_OFFSET;\n  //Text input flat\n  let LABEL_PADDING_TOP;\n  let LABEL_PADDING_HORIZONTAL;\n  let FLAT_INPUT_OFFSET;\n  let MIN_HEIGHT;\n  // Text input outlined;\n  let INPUT_PADDING_HORIZONTAL;\n  let ADORNMENT_OFFSET;\n  let OUTLINED_INPUT_OFFSET;\n\n  if (isV3) {\n    AFFIX_OFFSET = MD3_AFFIX_OFFSET;\n    ICON_OFFSET = MD3_ICON_OFFSET;\n    LABEL_PADDING_TOP = MD3_LABEL_PADDING_TOP;\n    LABEL_PADDING_HORIZONTAL = MD3_LABEL_PADDING_HORIZONTAL;\n    FLAT_INPUT_OFFSET = MD3_FLAT_INPUT_OFFSET;\n    MIN_HEIGHT = MD3_MIN_HEIGHT;\n    INPUT_PADDING_HORIZONTAL = MD3_INPUT_PADDING_HORIZONTAL;\n    ADORNMENT_OFFSET = MD3_ADORNMENT_OFFSET;\n    OUTLINED_INPUT_OFFSET = MD3_OUTLINED_INPUT_OFFSET;\n  } else {\n    AFFIX_OFFSET = MD2_AFFIX_OFFSET;\n    ICON_OFFSET = MD2_ICON_OFFSET;\n    LABEL_PADDING_TOP = MD2_LABEL_PADDING_TOP;\n    LABEL_PADDING_HORIZONTAL = MD2_LABEL_PADDING_HORIZONTAL;\n    FLAT_INPUT_OFFSET = MD2_FLAT_INPUT_OFFSET;\n    MIN_HEIGHT = MD2_MIN_HEIGHT;\n    INPUT_PADDING_HORIZONTAL = MD2_INPUT_PADDING_HORIZONTAL;\n    ADORNMENT_OFFSET = MD2_ADORNMENT_OFFSET;\n    OUTLINED_INPUT_OFFSET = MD2_OUTLINED_INPUT_OFFSET;\n  }\n\n  return {\n    AFFIX_OFFSET,\n    ICON_OFFSET,\n    LABEL_PADDING_TOP,\n    LABEL_PADDING_HORIZONTAL,\n    FLAT_INPUT_OFFSET,\n    MIN_HEIGHT,\n    INPUT_PADDING_HORIZONTAL,\n    ADORNMENT_OFFSET,\n    OUTLINED_INPUT_OFFSET,\n    MIN_WIDTH,\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}